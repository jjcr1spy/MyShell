#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 20
#define YY_END_OF_BUFFER 21
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[899] =
    {   0,
        0,    0,    0,    0,   21,   19,    2,    1,   19,   19,
        7,   19,    4,    3,   19,   19,    6,   14,   13,   20,
       12,   19,   19,    0,   19,   19,    0,   17,   19,    0,
       19,   19,   19,   10,    0,    0,    8,    5,   18,   18,
       18,   18,   18,   19,   14,   13,   17,   19,   17,    0,
        0,   18,   18,   17,   18,   18,   19,    0,   19,   15,
        0,   19,   19,    0,   19,    0,   19,    0,   18,   18,
        9,   18,   18,   18,   19,   18,    0,   18,    0,   18,
       18,   19,   18,   18,    0,   19,   19,    0,   17,   19,
        0,   19,    0,   17,   18,   18,   17,   18,   18,   19,

       18,   17,    0,   18,   17,   18,    0,   15,   19,    0,
       15,    0,   18,   18,   18,   18,   15,   18,   16,   16,
        0,    0,   16,   18,   18,   18,   18,   16,   18,    0,
       18,   19,    0,   18,   18,   18,   18,   18,    0,   18,
       19,    0,   18,    0,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   19,   18,   18,   19,   16,   17,   16,
       17,    0,    0,   16,   18,   17,   18,   18,   16,   18,
       19,    0,   18,   18,   17,   18,   18,    0,   17,   18,
       17,   18,   18,   19,   17,   18,   19,    0,   19,   15,
        0,   19,    0,   18,   18,   15,   18,   18,   15,   18,

       19,   18,   15,    0,   18,    0,   18,   15,   18,   19,
       18,   18,   15,    0,   16,   16,   16,   16,   16,   16,
       16,   18,   18,   16,   16,   16,   16,   19,   16,   18,
       18,   18,   19,   16,   18,    0,   16,   16,   16,   16,
       16,   16,   18,   18,   18,   18,    0,   18,   18,   18,
        0,   18,   18,   19,   18,   18,    0,   18,   18,   18,
       18,   19,   18,   18,    0,   18,   18,    0,   19,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   17,   18,
       16,   16,   16,   16,   16,   19,   16,   17,   18,    0,
       16,   16,   16,   16,   16,   16,   16,    0,   17,   17,

       17,   17,   16,   15,   16,    0,   15,    0,   16,   18,
       18,   18,   15,   18,   16,   18,   15,    0,   18,   19,
        0,   18,   18,   18,   18,   15,   18,    0,   18,   15,
       19,   15,    0,   18,    0,   18,   18,   18,   18,   15,
       18,   18,   18,   18,   15,   18,   19,   18,   18,   15,
       16,   16,   16,   16,   16,   18,    0,   16,   16,   16,
       16,   16,   16,   16,   18,   18,   18,   18,   16,   16,
        0,   18,   18,   18,   18,   18,   16,   16,   16,   16,
       16,   16,   18,   18,   16,   16,   16,   16,   16,   16,
       16,   18,   18,    0,   18,   18,   19,   18,    0,   19,

        0,   18,    0,   18,   18,   18,   18,   18,   18,   18,
        0,    0,   18,   18,    0,   18,   18,   18,   18,   18,
       18,   18,   19,   16,   18,   18,   18,   18,   11,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   18,   17,   18,   18,   16,   16,   17,   18,   16,
       16,   16,   16,   16,   16,   16,   17,   16,   16,   15,
       16,   16,   16,   16,   15,   16,   18,   18,   15,   16,
       16,   15,   16,   16,   19,   16,   18,   18,   15,   18,
       19,   16,   18,   15,    0,   16,   16,   16,   15,   16,
       16,   16,   18,   18,   18,   15,   18,    0,   18,   18,

       18,    0,   18,   15,   18,   19,   18,   18,   15,    0,
       18,   18,   18,   18,   19,   18,   18,   15,    0,   18,
       18,   15,    0,   16,   18,   18,   18,   16,   16,   16,
       16,   16,   16,   16,   16,   18,   18,   18,   19,   16,
       16,   18,   18,   16,   16,   18,    0,   16,   16,   16,
       16,   16,   16,   16,   18,    0,   16,    0,   18,   18,
       18,   18,   18,   18,   18,   18,   19,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   16,
       16,   16,   16,   16,    0,   18,   16,   16,   16,   16,
       16,   16,   16,   16,   15,   16,   16,   18,   15,    0,

       16,   16,   15,   16,   16,   16,   16,   15,   16,   18,
       18,   18,   15,   18,   16,   16,    0,   18,   18,   18,
       15,   18,   18,   16,   16,   16,   15,   16,   16,   16,
       18,   18,   15,   16,   16,   16,   16,   16,   15,   16,
       16,   18,   18,    0,   18,   15,   18,   19,   18,   15,
        0,   19,   15,    0,   18,    0,   18,   18,   18,   18,
       15,   18,   18,   18,   15,    0,    0,   18,   15,   18,
        0,   18,   18,   18,   15,   18,   18,   18,   15,   18,
       19,   16,   18,   18,   18,   15,   18,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   18,   18,   18,   18,   18,   16,   16,   18,
       18,   18,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   18,   18,   18,   18,   18,   18,   18,
       18,   16,   16,   18,   18,   16,   18,   18,   15,   18,
       16,   16,   15,   16,   16,   16,   16,   15,   16,   16,
       18,   18,   15,   18,   19,   16,   16,   18,   18,   16,
       16,   18,   15,    0,   16,   16,   16,   16,   15,   16,
       16,   16,   18,   15,    0,   16,   15,    0,   18,   18,
       18,   18,   18,   18,   18,   18,   19,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   16,

       16,   15,   16,   16,   16,    0,   18,   16,   16,   16,
       16,   18,   16,   16,   18,   16,   16,   16,   16,   16,
       18,   16,   16,   16,   16,   15,   16,   16,   16,   16,
       16,   16,   15,   16,   16,   16,   16,   15,   16,   16,
       18,   18,   18,   15,   18,   18,   16,   16,   18,   18,
       15,   18,   16,   16,   16,   15,   16,   16,   16,   16,
       16,   15,   16,   16,   16,   18,   18,   18,   18,   18,
       18,   18,   18,   16,   16,   18,   18,   16,   16,   16,
       16,   15,   16,   16,   18,   16,   16,   18,   16,   16,
       16,   16,   16,   18,   16,   16,   16,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,   10,   10,   10,   11,
       10,   10,   10,   10,   10,   10,   10,    1,    1,   12,
        1,   13,    1,    1,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1,   14,    1,    1,    1,    1,   10,   10,   15,   10,

       16,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       17,   10,   10,   18,   19,   10,   20,   10,   10,   10,
       10,   10,   21,   22,   23,   24,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[25] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[1180] =
    {   0,
        0,    0,   23,   26,  984,   25, 9440, 9440,   46,   63,
       24,   33,   28,   80,   91,   36,   29,  106,    0, 9440,
     9440,   53,  975,   49,  124,  145,  977,   57,  960,  166,
      179,  200,  221,   50,   67,   85,   56,   92,  238,  966,
      257,  274,   66,   99,    0,    0, 9440,  295,   86,  316,
      336,  341,  362,  373,  394,  415,  428,  970,  957,    0,
      449,  462,  483,  954,    0,  505,  527,  129,  104,  139,
       95,   19,  959,  126,  547,  956,  964,  954,  953,   91,
      138,  566,  587,  172,  150,  155,  608,  629,    0,    0,
      651,  673,  695,  160,  708,  120,  173,  952,  174,  728,

      749,  951,  194,  762,  184,  950,  783,  954,  788,  809,
      940,  829,  837,  858,  871,  892,  939,  913,  926,  177,
      948,  970,  992, 1014, 1036,    0, 1058, 1080, 1100, 1118,
      201, 1129,  212,  938,  944, 1147,    0,  205,   62,  161,
      216,   97, 1168, 1187,    0,  222, 1198,  936,  225,  951,
      941,  939, 1219,  233,  242,  243, 1237, 1259,  929, 1282,
     1304,  928, 1326, 1348, 1370,  218,    0, 1392, 1415, 1438,
     1451, 1470, 1490, 1511,    0,  926,  925,  263,  241,  930,
      928,  927,  914,  268,  270,    0, 1524,  201,    0,    0,
     1546, 1568, 1590, 1603, 1616,  910,  264,  915,  269,  289,

     1636, 1657, 1670,  322, 1683,  302, 1704,  897, 1725, 1738,
     1759,  896,  291, 1780, 1788, 1810, 1832, 1854,    0,  252,
      279, 1876, 1898, 1920, 1942, 1964, 1986, 2008, 2030,  869,
      866, 2052, 2074, 2096, 2118, 2140, 2162, 2184,    0, 2206,
     2228,    0,  853,  309, 2248, 2266, 2279, 2299,  322, 2318,
      857, 2337,  344, 2356,  263,  321,  248,  345,  347, 2375,
      348, 2394,  366, 2414,  346, 2427, 2447, 2465, 2474, 2496,
        0,    0, 2519, 2541,    0, 2563,  291, 2585,  854, 2607,
     2629, 2651, 2673, 2695,    0, 2717, 2740,  369, 2763, 2785,
     2807,    0,    0,    0,    0, 2829,    0,  377, 2849,  388,

      374, 2870, 2892,  380, 2914, 2936, 2958, 2980, 3002, 3024,
     3046, 3068,    0, 3090, 3112, 3134, 3154, 3167, 3180, 3193,
     3214, 3222, 3243, 3256,  845,    0, 3277,  422, 3290, 3303,
     3316,  424, 3337, 3350,  400, 3371, 3392, 3405,  842,    0,
      844,  848,  828,  826,  823,  809,  408, 3426,  805,    0,
      811, 3439,  810, 3461,  808, 3483, 3505, 3527, 3549, 3571,
     3593, 3615, 3637, 3659, 3681, 3703, 3725, 3747,  807,  431,
     3769, 3791, 3813, 3835,  442,  809, 3857,  795,  789,  782,
      455,  779, 3879, 3901, 3923, 3945,  777, 3967,  769,  468,
      766, 3989, 4009,  765, 4028,  448, 4047, 4065, 4083, 4094,

      396,  425, 4113, 4124,  466,    0,  757,  472,  772,  473,
      474,  476,  479,  487,  489,    0,  494,  496,  508, 4145,
     4167, 4189,  510, 4211, 4233,  512, 4244, 4262, 4271, 4293,
        0,    0, 4316,    0,  516, 4338, 4360,    0,    0,  748,
      744, 4383,    0,    0, 4406,    0,  530, 4428, 4450,  743,
      532,    0, 4472,    0,  742,    0,    0, 4494, 4516,    0,
     4538, 4560,    0, 4582, 4604, 4626, 4648, 4670, 4692, 4714,
     4736,    0, 4758,    0, 4780, 4802, 4824, 4846,    0, 4868,
     4891, 4914,  730,  729, 4936, 4958, 4980,    0,    0,    0,
     5002,    0,  719, 5024, 5037, 5057,  733,  543, 5070, 5091,

     5104,  552, 5125,  706, 5146, 5159, 5180, 5193, 5206, 5219,
     5232,  488, 5245, 5266,  551,  710,  553, 5279, 5292, 5305,
      702,    0, 5327, 5340, 5362, 5384, 5406, 5428, 5450,  559,
        0, 5472, 5494, 5516, 5538, 5560, 5582,  707, 5604, 5626,
     5648,    0,  706, 5670, 5692,  690, 5714, 5736, 5758,  688,
      676,    0, 5780,  675, 5802, 5824, 5846,  563, 5868, 5887,
     5906, 5927,  570, 5938, 5949, 5968,  577,  581, 5987,  578,
      513,  592,  590,  603,  601,  612,  614, 6000,  679, 6022,
        0,    0,  631,    0,  633,  635,  669, 6044, 6066,    0,
        0, 6088, 6110, 6132,    0, 6154,    0, 6176, 6198, 6220,

     6242, 6264,    0, 6286,    0, 6308,  658,  656,  655, 6330,
     6352, 6374,    0, 6396,    0,  646,  654, 6418, 6440, 6462,
        0,  653,  661, 6484,  634,  632,  630,  629,  657,  628,
     6506, 6528,    0,  626,  659,    0, 6550,    0,    0,  615,
        0, 6572, 6594,  678, 6615,  606, 6636, 6647, 6667,  604,
     6685, 6705,  679, 6726,  668, 6739, 6752, 6773,    0,  603,
        0, 6786,  618, 6799, 6812, 6825, 6838, 6851, 6864, 6877,
     6890,    0,  689,  598, 6903, 6916, 6929, 6951,    0, 6973,
      701, 6995, 7017,    0,  581,    0,  593, 7030, 7052, 7074,
     7096,  585,    0, 7118, 7140, 7162, 7184,    0,  572,  702,

      561,  703, 7206, 7228,    0, 7250,  557, 7272,  714, 7294,
        0,  540,  529,  721, 7316, 7338,  732,    0,    0,    0,
      528,  536,    0, 7360, 7382, 7402,  741,    0,  734,  745,
     7423, 7445, 7467,    0,  755, 7490,  747, 7513, 7535,  533,
     7557, 7579,    0,  767,    0, 7601, 7623, 7645,    0, 7667,
      511,  509,  490,  475, 7690, 7713, 7735,  759,  790, 7757,
     7780,  442,  438, 7803, 7825, 7847,  443,  435,  430,    0,
     7870,  429,    0,    0,  794, 7893,  803, 7915, 7928, 7949,
     7970,  405, 7991, 8004, 8017, 8038,  802, 8059, 8072,  814,
     8085, 8098, 8111, 8124,  815,  822, 8137, 8150,  420,    0,

        0,    0,    0,  840,    0, 8170,  842, 8192, 8214,  418,
        0,    0, 8236, 8258,    0,    0,  843, 8280, 8302,  847,
     8324, 8346,  850,    0,  860,  864,  397,  395,  865,  379,
      385,    0,    0, 8368,    0,  361,  357,  355,  876,  343,
        0,    0,    0,    0,  868,  351,    0,  883,  872,  885,
      886,  897,  320,  919,    0,    0,  921,    0,    0,    0,
        0,    0,  319,  327,    0,    0,  324,  301,  289,    0,
      898,  287,    0,    0,  286,  893,  110,    0,  284,  245,
      244,  228,  916,  226,    0,    0,  929,  922,  214,  220,
        0,  203,    0,    0,    0,  175,    0, 9440, 8391,  176,

     8395,  161, 8399,  160, 8403, 8407, 8411, 8415, 8419, 8421,
      138,  137, 8425,   82, 8429, 8433, 8437, 8441, 8445, 8449,
     8453, 8457, 8461, 8463, 8465, 8469, 8473, 8477, 8481, 8485,
     8489, 8491, 8495, 8499, 8503, 8507, 8511, 8515, 8519, 8523,
     8527, 8531, 8535, 8539, 8543, 8547, 8549, 8551, 8555, 8557,
     8561, 8563, 8565, 8569, 8573, 8577, 8581,   81, 8585, 8587,
     8591, 8595, 8599, 8603, 8607, 8611, 8615, 8619, 8623, 8627,
     8631, 8635, 8639, 8643, 8647, 8651, 8655, 8659, 8661, 8663,
     8667, 8669, 8673, 8675, 8677, 8681, 8685, 8687, 8691, 8695,
     8699, 8703, 8707, 8711, 8715, 8719, 8723, 8727, 8731, 8735,

     8739, 8743, 8747, 8751, 8755,   78, 8759, 8763, 8767, 8771,
     8775, 8779, 8783, 8787, 8791, 8795, 8799, 8803, 8807, 8811,
     8815, 8819, 8823, 8827, 8831, 8835, 8839, 8843, 8847, 8851,
     8855, 8859, 8863, 8867, 8871, 8875, 8879, 8883, 8885, 8889,
     8893, 8897, 8901, 8903, 8907, 8909, 8913, 8917, 8921, 8925,
     8929, 8933, 8937, 8941, 8945, 8949, 8953, 8957, 8961, 8965,
       35, 8969, 8973, 8977, 8981, 8985, 8989, 8993, 8997, 9001,
     9005, 9009, 9013, 9017, 9021, 9025, 9029, 9033, 9037, 9041,
     9045, 9049, 9053, 9057, 9061, 9065, 9069, 9073, 9077, 9081,
     9085, 9089, 9093, 9097, 9101, 9105, 9109, 9113, 9115, 9119,

     9123, 9127, 9131, 9135, 9139, 9143, 9147, 9151, 9155, 9159,
     9163, 9167, 9171, 9175, 9179, 9183, 9187, 9191, 9195, 9199,
     9203, 9207, 9211, 9215, 9219, 9223, 9227, 9231, 9235, 9239,
     9243, 9247, 9251, 9255, 9259, 9263, 9267, 9271, 9275, 9279,
     9283, 9287, 9291, 9295, 9299, 9303, 9307, 9311, 9315, 9319,
     9323, 9327, 9331, 9335, 9339, 9343, 9347, 9351, 9355, 9359,
     9363, 9367, 9371, 9375, 9379, 9383, 9387, 9391, 9395, 9399,
     9403, 9407, 9411, 9415, 9419, 9423, 9427, 9431, 9435
    } ;

static const flex_int16_t yy_def[1180] =
    {   0,
      898,    1,  899,  899,  898,  900,  898,  898,  901,  900,
       10,   10,  902,  902,  903,   10,  902,   10,  904,  898,
      898,   10,   10,  902,  903,  901,  905,   10,   26,  906,
      907,  908,  909,  902,  902,  910,  902,  902,  911,  912,
      913,  911,  914,   10,   18,  904,  898,  915,  902,  906,
      916,  917,  918,  913,  917,  919,  908,  920,   57,   57,
      921,  922,  909,  923,   63,  924,  925,  924,  926,  914,
      902,   42,   42,  914,  927,  912,  928,   54,  929,   54,
      926,  930,  931,  914,  932,   10,  915,  933,   63,   87,
      934,  935,  934,  926,  919,   55,   42,   55,   95,  936,

      918,  912,  937,  938,  914,   95,  939,  920,  940,  921,
      110,  941,  942,  943,  944,  942,  116,  945,  946,  947,
      924,  948,  949,  931,  950,  124,  951,  952,  926,  953,
      951,   42,  914,   42,  912,  954,   42,  914,  912,  955,
       54,  929,  950,  926,   54,  956,  954,   54,  926,   54,
      124,  124,  951,  124,  957,  914,  958,  898,  959,  960,
      924,   93,  961,  962,  938,  143,  165,  963,  898,  963,
      964,   95,  964,  965,  147,  173,   95,  965,  955,  165,
      124,  165,  170,  165,  957,   95,  940,  966,  187,  187,
      967,  968,  967,  969,  945,  195,  116,  116,  116,  195,

      970,  971,  971,  972,  973,  974,  973,  207,  969,  975,
      976,  195,  195,  977,  978,  978,  979,  980,  216,  981,
      981,  982,  983,  984,  979,  985,  979,  986,  987,  143,
      143,  982,  988,  989,  983,  990,  984,  987,  238,  984,
      991,  238,  232,  957,  992,  992,  983,  993,  994,  995,
      996,  995,  957,  997,  998,  999, 1000, 1001,  252, 1002,
     1001,  143,  957,  992, 1003, 1004,  957, 1005, 1006,  898,
      216,  270, 1007, 1008,  270, 1009,  981, 1009,  232, 1010,
     1011,  979, 1007, 1012,  283, 1013,  898,  247, 1010, 1014,
     1011,  287,  238,  287,  291, 1015,  287,  289,  993,  994,

      998, 1004, 1016, 1017, 1018, 1019, 1019, 1020, 1021, 1022,
     1023, 1022,  312, 1024, 1025, 1026, 1026, 1027, 1024, 1028,
     1029, 1028, 1030, 1031,  322,  322, 1029, 1030, 1032, 1030,
     1033, 1034, 1034, 1023,  317, 1033, 1035, 1031,  336,  336,
      317,  336,  312,  312,  312,  319,  312, 1036,  327,  327,
      238, 1037,  238, 1038,  238, 1039, 1040, 1041, 1038, 1042,
     1038, 1041, 1038, 1038, 1043, 1044, 1043, 1045,  238,  238,
     1039, 1046, 1044, 1046,  371,  374, 1037,  377,  377,  362,
      377,  377, 1047, 1045, 1038, 1038,  238, 1048,  238,  386,
      238, 1049, 1050, 1051, 1050, 1052,  395, 1052, 1052, 1053,

     1054,  373, 1055, 1053, 1056,  404,  404, 1055,  404, 1057,
     1057, 1056, 1056, 1056, 1058,  373,  374, 1056, 1058, 1059,
     1059, 1049,  421, 1060, 1047, 1055, 1055, 1055, 1061,  898,
      377,  430, 1062,  430,  386, 1062, 1063,  436,  362,  436,
      436,  898,  373,  442, 1064,  430,  430, 1047, 1064,  436,
      436,  430, 1048,  430,  436,  430,  422, 1065, 1065,  459,
     1066, 1067,  459, 1068, 1068, 1068, 1069, 1070, 1070, 1071,
     1066,  471, 1072,  471, 1073, 1074, 1075, 1075,  478, 1069,
      898, 1076,  469,  469, 1077, 1071, 1074,  487,  487,  486,
     1078,  487,  480, 1079, 1080, 1080,  496,  469, 1081, 1082,

     1083, 1084, 1083,  503, 1079, 1085, 1086, 1087, 1087, 1088,
     1089,  503, 1090, 1089,  478,  505,  496, 1089, 1091, 1092,
      505,  505, 1093, 1094, 1047, 1095, 1095, 1096, 1096,  529,
      529, 1097, 1098, 1098, 1099, 1100, 1100,  525, 1101, 1102,
     1103,  525,  527, 1102, 1104,  525, 1105, 1097, 1106,  544,
      544,  548, 1107,  544, 1108, 1108, 1106, 1109, 1110, 1111,
     1111, 1108, 1112, 1112, 1113, 1113,  537, 1114, 1114,  566,
     1115, 1115, 1116, 1116, 1116, 1116, 1117, 1110,  578, 1103,
      580,  557,  580,  580,  525, 1114,  548, 1118, 1118,  580,
      557, 1119, 1120, 1119,  594, 1121,  594, 1122, 1122, 1123,

     1124, 1121,  602, 1125,  602, 1124,  602,  602,  602, 1126,
     1127, 1126,  612, 1128,  594,  594,  599, 1129, 1127, 1129,
      620,  599,  620, 1120,  624,  624,  624,  606,  624,  624,
     1130, 1128,  632,  602,  602,  594, 1131,  594,  594,  602,
      594, 1132, 1133, 1134, 1133,  645, 1135,  645, 1135,  649,
      649, 1136, 1137, 1137,  619, 1138, 1136, 1139,  657,  657,
      657, 1138,  657, 1140, 1140, 1140, 1139, 1139, 1139, 1139,
     1141,  619,  620,  670, 1141, 1141, 1142, 1142,  678, 1132,
      678, 1143, 1130,  662,  662,  662,  662, 1144, 1145, 1144,
     1146,  690,  690, 1147, 1146, 1147, 1148,  696,  696,  695,

      695,  695, 1149, 1149,  704, 1150,  704, 1145,  708, 1150,
      710,  710,  696,  696, 1151, 1151,  716,  708,  708,  708,
      696,  708,  708, 1152, 1152, 1153, 1154,  704,  704, 1155,
     1156, 1157, 1157,  710,  710,  898,  683, 1158, 1158,  739,
     1159, 1159,  742,  742,  742, 1160, 1161, 1161,  748, 1162,
      619,  619,  619,  683,  898, 1163, 1143,  683,  739, 1163,
      898,  683,  683, 1164, 1160, 1165,  760,  760,  760,  765,
      898,  760,  680,  680,  680, 1165, 1166, 1166, 1167, 1168,
     1168,  680, 1169, 1169, 1170, 1170,  619, 1171, 1171,  786,
     1172, 1172, 1173, 1173,  794,  794, 1174, 1167,  798,  757,

      757,  757,  776,  757,  757,  683,  789, 1175, 1175,  809,
      809,  704, 1176, 1176,  710,  809,  809, 1177, 1177,  814,
     1178, 1157,  761,  760,  761,  761,  742,  761,  761,  765,
      742,  765,  765, 1179,  765,  765,  742,  742,  742,  742,
      619,  619,  619,  619,  683,  619,  760,  760,  683,  683,
      683,  683,  765,  765,  776,  776,  776,  776,  760,  760,
      760,  760,  765,  760,  760,  680,  680,  781,  784,  619,
      619,  792,  798,  757,  757,  683,  683,  809,  819,  765,
      765,  765,  765,  765,  619,  760,  760,  683,  765,  765,
      776,  776,  760,  680,  757,  765,  776,    0,  898,  898,

      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,

      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,

      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898
    } ;

static const flex_int16_t yy_nxt[9465] =
    {   0,
        6,    7,    8,    7,    9,   10,   11,    6,    6,    6,
       12,   13,   14,   15,    6,    6,    6,    6,   16,    6,
        6,   17,    6,   18,   20,   20,   21,   20,   20,   21,
       23,   22,  132,   35,   35,   22,   24,   24,   25,   72,
       22,   36,   36,   22,   22,   34,   24,   27,   27,   27,
       28,   29,   44,   22,   35,   35,   22,   30,   30,   31,
       22,   35,   36,   36,   22,   76,  255,   30,   23,   36,
       32,   84,   35,   22,   24,   24,   25,   22,   22,   85,
       36,   22,   74,   33,   24,   35,   37,   68,   40,   69,
       70,   35,   38,   36,   40,   41,   42,   35,   71,   36,

       35,  261,   43,   43,  141,   36,   22,   79,   36,  129,
      142,  143,   43,   22,  888,   45,   45,  130,   86,   22,
       45,   45,   45,   45,   45,   45,   22,   40,   41,   42,
       64,   84,  765,  171,  121,   43,   43,   76,   72,  133,
       96,   79,  122,  129,   84,   43,   27,   27,   27,   28,
       29,  144,   85,  135,  155,  156,   30,   30,   31,  131,
       46,   24,   22,   79,  251,  129,   30,   27,   27,   27,
       49,   50,  157,  130,  257,   22,   22,   84,   64,   51,
       27,   27,   53,   54,   55,  133,  132,  172,  834,   84,
       56,   56,  131,   72,   99,   27,   27,  133,  179,  221,

       56,   58,   64,   58,   58,   59,  235,  897,   60,  304,
       84,   61,   61,   62,  247,   76,  249,   84,   85,  258,
      259,   61,   64,  305,  896,   79,   65,  834,   79,  260,
      129,  233,   66,   66,   67,  265,   76,  266,  130,  834,
      234,  834,   66,   73,  251,  251,  151,  267,   84,   74,
       74,   75,  413,   64,  257,  268,   85,  834,  834,   74,
       79,  414,   80,  131,   27,   27,  394,  301,   81,   81,
       82,  101,  302,  251,  221,  267,  411,  320,   81,   73,
       64,  180,  320,  268,  197,   74,   74,   75,  582,  197,
      895,  664,   64,  647,   83,   74,   88,   27,   27,   89,

       90,  221,  321,   58,  321,  643,   91,   91,   92,  200,
      332,  200,  251,  221,  267,  333,   91,   27,   27,   27,
       49,   50,  268,   58,  251,  394,  329,  398,  894,   51,
      330,  893,  834,  834,  412,  399,   93,   27,   27,   53,
       94,   95,   27,   27,   27,   97,   98,  251,   79,  267,
      418,   79,   99,   99,  100,  885,  750,  403,  415,  419,
      254,  265,   99,   27,   27,   27,  102,  250,  750,  251,
      750,  267,  898,  153,  834,  103,   79,  394,   80,  268,
      101,  457,  247,   58,   81,   81,   82,  411,  304,  827,
      183,  394,  834,  398,   81,   27,   27,   27,   97,   98,

      405,  399,  305,  511,  516,   99,   99,  100,  736,  401,
      750,  202,  520,  517,  104,   99,   27,   27,   27,  105,
      106,  343,  878,   58,  873,   58,  507,  680,  107,   58,
      203,   58,  332,   59,   76,  541,   60,  333,  567,   61,
       61,   62,  848,  848,  238,   79,  232,  536,  848,   61,
       58,  394,   58,  398,  110,  357,  848,  111,  258,  544,
      765,  399,  112,   58,  765,  114,  115,  116,  545,  251,
      117,  898,  240,  118,  118,  251,  394,  267,  571,  257,
      573,  360,  251,  118,   64,  268,  411,  572,   65,  574,
      251,  575,  257,  576,   66,   66,   67,  765,  372,  251,

      257,  506,  577,  787,   66,  119,   64,  262,  501,  257,
      121,   79,  146,  410,  578,  251,  394,  267,  122,  898,
      240,  265,  787,  579,  787,  268,  411,  123,   64,  386,
       40,  125,  126,  101,  590,  101,  591,  622,  127,  127,
      820,  697,  697,  292,  815,  295,  202,  642,  127,  128,
      135,  136,  137,   58,  511,  672,  346,  341,  138,  138,
      653,  812,  258,  694,  673,  654,  335,  410,  138,  146,
      147,  148,  695,  394,  535,  398,  558,  149,  149,  150,
      256,  728,  250,  399,  251,  697,  267,  149,   64,  688,
      729,  254,  152,  251,  268,  394,  730,  807,  153,  153,

      154,  683,  508,  257,  251,  411,  251,  575,  153,   88,
       27,   27,   89,   90,  257,  251,  412,   79,  146,   91,
       91,   92,  790,  655,  647,  257,  643,  415,  604,   91,
      158,   27,   27,  159,  410,  732,  256,  734,  251,  604,
      267,  629,  744,  629,  733,  629,  735,  629,  268,  202,
      757,  160,   88,   27,   27,  161,  162,  511,  758,  487,
      511,  760,  202,  766,  163,  618,  600,  759,  604,  604,
      761,  604,  490,  164,   88,   27,   53,  166,  167,   58,
       58,  787,  697,  731,  168,  168,  777,  653,  709,  709,
      751,  778,  654,  618,  168,  169,   88,   27,   27,  161,

      162,  709,  515,  585,  664,  798,  380,  380,  163,   27,
       27,   27,  105,  106,  799,  535,  535,  256,  813,  371,
      585,  107,  683,  523,  256,  816,  501,  814,  170,   27,
       27,  174,  175,  176,  817,  394,  582,  341,  812,  177,
      177,  480,  498,  498,  394,  716,  398,  567,  394,  177,
       27,   27,   27,  102,  399,  437,  437,  437,  411,  815,
      764,  437,  178,   88,   27,   27,  181,  182,  585,  765,
      511,  830,  764,  183,  183,  184,  570,  402,  558,  241,
      831,  765,  241,  183,   27,   27,  174,  185,  186,  188,
      241,   58,  381,  189,  622,  530,  190,  664,  866,  191,

      191,  192,  381,  617,   58,  508,  870,  867,  381,  191,
       58,  777,   58,  372,  110,  871,  778,  111,  501,  508,
      241,  241,  112,  241,  241,  319,  508,  506,  510,  193,
       58,  486,  114,  194,  195,  510,  347,  196,   58,  347,
       58,  347,  198,  664,  874,  199,  505,  878,  200,  200,
      201,  550,  336,  875,  625,  523,  714,  318,  200,   58,
      553,   58,  334,  736,  625,  211,  203,  357,  625,  625,
      401,  204,   58,  736,  206,  232,  207,  736,  736,  208,
      827,  764,  209,  209,  210,  764,  508,  886,  234,  750,
      765,  234,  209,   58,  765,   58,  887,  198,  764,  764,

      199,  888,  885,  200,  200,  201,  764,  765,  765,  321,
      764,  787,  211,  200,   58,  765,   58,  205,  212,  765,
      896,  213,  508,  889,  664,  891,  214,   64,  320,  834,
      200,  216,  890,  893,  892,  764,  291,  217,  217,  218,
      184,  154,  848,  184,  765,   99,  104,  217,  219,   64,
      164,  120,  154,  121,  154,  145,  143,   77,   72,  197,
       61,  122,  108,  172,  139,  171,  142,  141,  140,  139,
      123,   64,  132,   40,  222,  223,  120,  109,  108,   77,
       48,   47,   22,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  224,   64,  898,  898,  898,  225,  898,  898,

      898,  898,  898,  898,  898,  226,  898,  898,  898,  898,
      898,  898,  898,  898,  227,   64,  898,  898,  898,  152,
      898,  898,  898,  898,  898,  153,  153,  228,  898,  898,
      898,  898,  898,  898,  898,  153,  229,   64,  898,   79,
      898,  231,  898,  898,  898,  898,  898,  232,  232,  233,
      898,  898,  898,  898,  898,  898,  898,  232,  234,   64,
      898,  898,  898,  235,  898,  898,  898,  898,  898,  898,
      898,  236,  898,  898,  898,  898,  898,  898,  898,  898,
      237,   64,  898,  898,  898,  239,  898,  898,  898,  898,
      898,  240,  240,  241,  898,  898,  898,  898,  898,  898,

      898,  240,  242,   79,  898,  129,  898,  898,  898,  898,
      898,  898,  898,  144,  898,  898,  898,  898,  898,  898,
      243,  146,  244,  245,  898,  898,  898,  898,  898,  898,
      898,  246,   76,  248,  898,  898,  898,  898,  898,  898,
      898,  898,   72,  898,  898,  898,  898,  898,  898,   72,
      251,  898,  252,  898,  898,  898,  898,  898,  253,  253,
      254,  898,  898,  898,  898,  898,  898,  898,  253,   64,
      898,   79,  898,  231,  898,  898,  898,  898,  898,  232,
      232,  262,  898,  898,  898,  898,  898,  898,  898,  232,
      258,  263,  129,  898,  898,  898,  898,  898,  898,  898,

      264,  251,  898,  252,  898,  898,  898,  898,  898,  253,
      253,  254,  898,  898,  898,  898,  898,  898,  898,  253,
       64,  898,  898,  898,  235,  898,  898,  898,  898,  898,
      898,  898,  247,  898,  898,  898,  898,  898,  898,  898,
      898,  237,   23,  898,  898,  898,  898,  898,   24,   24,
       25,  269,  898,  898,  898,  898,  898,  898,   24,  270,
       88,   27,   27,  271,  272,  270,  270,  270,  270,  270,
      273,  273,  274,  270,  270,  270,  270,  270,  270,  270,
      273,  275,  270,   88,   27,   27,  277,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,

      898,  898,  898,  898,  278,   64,  898,  898,  898,  121,
      898,  898,  898,  898,  898,  898,  898,  122,  898,  898,
      898,  898,  898,  898,  898,  898,  123,   88,   27,   53,
      279,  280,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  281,   88,
       27,   27,  282,  283,  898,  898,  898,  898,  898,  898,
      898,  284,  898,  898,  898,  898,  898,  898,  898,  898,
      285,   88,   27,   27,  181,  182,  898,  898,  898,  898,
      898,  183,  183,  286,  898,  898,  898,  898,  898,  898,
      898,  183,  287,   88,   27,   27,  288,  289,  898,  898,

      898,  898,  898,  898,  898,  290,  898,  898,  898,  898,
      898,  898,  898,  898,  291,  292,   88,   27,   27,  293,
      294,  292,  292,  292,  292,  292,  295,  295,  296,  292,
      292,  292,  292,  292,  292,  292,  295,  297,  292,   88,
       27,   27,  288,  289,  898,  898,  898,  898,  898,  898,
      898,  298,   27,   27,  101,  299,   98,  898,  898,  898,
      898,  898,   99,   99,  898,  898,  898,  898,  898,  898,
      898,  898,   99,  101,  300,  898,  898,  898,  898,  898,
      898,  898,  898,   99,  898,  898,  898,  898,  898,  898,
       99,   27,   27,   27,   97,   98,  898,  898,  898,  898,

      898,   99,   99,  100,  898,  898,  898,  898,  898,  898,
      898,   99,   27,   27,   27,  102,  898,  898,  898,  898,
      898,  898,  898,  898,  103,  188,  898,   58,  898,  189,
      898,  898,  190,  898,  898,  191,  191,  192,  898,  898,
      898,  898,  898,  898,  898,  191,  303,  188,  898,   58,
      898,  306,  898,  898,  307,  898,  898,  898,  898,  308,
      898,  898,  898,  898,  898,  898,  898,  898,  309,  188,
      898,  114,  311,  312,  898,  898,  313,  898,  898,  314,
      314,  898,  898,  898,  898,  898,  898,  898,  898,  314,
      315,  188,  898,   58,  898,  306,  898,  898,  307,  898,

      898,  898,  898,  308,   58,  898,  206,  898,  316,  898,
      898,  317,  898,  898,  898,  898,  318,   58,  898,   58,
      898,  212,  898,  898,  213,  898,  898,  898,  898,  214,
      898,  898,  898,  898,  898,  898,  319,   58,  898,  323,
      324,  325,  898,  898,  326,  898,  898,  327,  327,  898,
      898,  898,  898,  898,  898,  898,  898,  327,   58,  898,
       58,  898,  898,  898,  898,  203,  898,  898,  898,  898,
      328,   58,  898,   58,  898,  898,  898,  898,  203,  898,
      898,  898,  898,  328,   58,  898,  206,  898,  207,  898,
      898,  208,  898,  898,  209,  209,  331,  898,  898,  898,

      898,  898,  898,  898,  209,   58,  898,  206,  898,  207,
      898,  898,  208,  898,  898,  209,  209,  331,  898,  898,
      898,  898,  898,  898,  334,  209,   58,  898,  206,  898,
      316,  898,  898,  317,  898,  898,  898,  898,  335,   58,
      898,  337,  338,  339,  898,  898,  340,  898,  898,  341,
      341,  342,  898,  898,  898,  898,  898,  898,  898,  341,
      188,  898,   58,  898,  344,  898,  898,  345,  898,  898,
      346,  346,  347,  898,  898,  898,  898,  898,  898,  898,
      346,   58,  898,  323,  348,  349,  898,  898,  350,   64,
      898,  898,  898,  216,  898,  898,  898,  898,  898,  217,

      217,  218,  898,  898,  898,  898,  898,  898,  898,  217,
      219,   64,  898,  898,  898,  216,  898,  898,  898,  898,
      898,  217,  217,  218,  898,  898,  898,  898,  898,  898,
      898,  217,  219,   64,  898,  898,  898,  225,  898,  898,
      898,  898,  898,  898,  898,  226,  898,  898,  898,  898,
      898,  898,  898,  898,  227,   64,  898,   40,  352,  353,
      898,  898,  898,  898,  898,  354,  354,  898,  898,  898,
      898,  898,  898,  898,  898,  354,  355,   64,  898,   79,
      898,  356,  898,  898,  898,  898,  898,  898,  898,  357,
      898,  898,  898,  898,  898,  898,  898,  898,  358,   64,

      898,  898,  898,  235,  898,  898,  898,  898,  898,  898,
      898,  236,  898,  898,  898,  898,  898,  898,  898,  898,
      237,   64,  898,  898,  898,  359,  898,  898,  898,  898,
      898,  898,  898,  360,  898,  898,  898,  898,  898,  898,
      898,  898,  361,   64,  898,  898,  898,  225,  898,  898,
      898,  898,  898,  898,  898,  226,  898,  898,  898,  898,
      898,  898,  898,  898,  227,   64,  898,   40,  362,  363,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  364,   64,  898,  898,
      898,  225,  898,  898,  898,  898,  898,  898,  898,  226,

      898,  898,  898,  898,  898,  898,  898,  898,  227,   64,
      898,  135,  366,  367,  898,  898,  898,  898,  898,  368,
      368,  898,  898,  898,  898,  898,  898,  898,  898,  368,
      369,   64,  898,  898,  898,  239,  898,  898,  898,  898,
      898,  240,  240,  370,  898,  898,  898,  898,  898,  898,
      898,  240,  242,   64,  898,   79,  898,  356,  898,  898,
      898,  898,  898,  898,  898,  371,  898,  898,  898,  898,
      898,  898,  898,  898,  358,   64,  898,  146,  373,  374,
      898,  898,  898,  898,  898,  375,  375,  376,  898,  898,
      898,  898,  898,  898,  898,  375,  377,   64,  898,   79,

      898,  379,  898,  898,  898,  898,  898,  380,  380,  381,
      898,  898,  898,  898,  898,  898,  898,  380,  382,   64,
      898,  898,  898,  235,  898,  898,  898,  898,  898,  898,
      898,  247,  898,  898,  898,  898,  898,  898,  898,  898,
      237,   64,  898,  135,  383,  384,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  385,   64,  898,  898,  898,  359,  898,  898,
      898,  898,  898,  898,  898,  386,  898,  898,  898,  898,
      898,  898,  898,  898,  361,   64,  898,  898,  898,  239,
      898,  898,  898,  898,  898,  240,  240,  370,  898,  898,

      898,  898,  898,  898,  898,  240,  242,   64,  898,  898,
      898,  359,  898,  898,  898,  898,  898,  898,  898,  386,
      898,  898,  898,  898,  898,  898,  898,  898,  361,   64,
      898,  135,  388,  389,  898,  898,  898,  898,  898,  390,
      390,  898,  898,  898,  898,  898,  898,  898,  898,  390,
      391,   79,  898,  129,  898,  898,  898,  898,  898,  898,
      898,  130,  898,  898,  898,  898,  898,  898,  243,   79,
      149,  129,  898,  898,  898,  898,  898,  898,  898,  130,
       64,  898,   76,  392,  235,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,

      898,  237,  394,  898,  395,  898,  898,  898,  898,  898,
      396,  396,  397,  898,  898,  898,  898,  898,  898,  898,
      396,  251,  898,  252,  898,  898,  898,  898,  898,  253,
      253,  400,  898,  898,  898,  898,  898,  898,  898,  253,
      251,  898,  252,  898,  898,  898,  898,  898,  253,  253,
      400,  898,  898,  898,  898,  898,  898,  402,  253,  405,
      406,  407,  898,  898,  898,  898,  898,  408,  408,  409,
      898,  898,  898,  898,  898,  898,  898,  408,   79,  145,
       80,  898,  898,  898,  898,  898,   81,   81,  141,  898,
      898,  898,  898,  898,  898,  898,   81,  258,  416,  898,

      898,  898,  898,  898,  898,  898,  898,  417,  898,  898,
      898,  898,  898,  898,  898,  898,  234,   79,  149,  129,
      898,  898,  898,  898,  898,  898,  898,  144,   64,  898,
      394,  898,  421,  898,  898,  898,  898,  898,  422,  422,
      423,  898,  898,  898,  898,  898,  898,  898,  422,  424,
      251,  898,  267,  898,  898,  898,  898,  898,  898,  898,
      403,  898,  898,  898,  898,  898,  898,  425,  405,  426,
      427,  898,  898,  898,  898,  898,  898,  898,  428,   23,
      898,  898,  898,  898,  898,   24,   24,   25,  898,  429,
      898,  898,  898,  898,  898,   24,  270,   88,   27,   27,

      271,  272,  270,  270,  270,  270,  270,  273,  273,  274,
      270,  270,  270,  270,  270,  270,  270,  273,  275,  270,
       88,   27,   27,  282,  283,  898,  898,  898,  898,  898,
      898,  898,  284,  898,  898,  898,  898,  898,  898,  898,
      898,  285,   88,   27,   53,  431,  432,  898,  898,  898,
      898,  898,  433,  433,  898,  898,  898,  898,  898,  898,
      898,  898,  433,  434,   88,   27,   27,  277,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  278,   88,   27,   27,  277,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,

      898,  898,  898,  898,  898,  898,  898,  278,   88,   27,
       27,  288,  289,  898,  898,  898,  898,  898,  898,  898,
      290,  898,  898,  898,  898,  898,  898,  898,  898,  291,
       88,   27,   27,  435,  436,  898,  898,  898,  898,  898,
      898,  898,  437,  898,  898,  898,  898,  898,  898,  898,
      898,  438,   64,  898,  898,  898,  225,  898,  898,  898,
      898,  898,  898,  898,  226,  898,  898,  898,  898,  898,
      898,  898,  898,  227,   88,   27,   27,  282,  283,  898,
      898,  898,  898,  898,  898,  898,  284,  898,  898,  898,
      898,  898,  898,  898,  898,  285,   88,   27,   53,  439,

      440,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  441,   88,   27,
      174,  443,  444,  898,  898,  898,  898,  898,  445,  445,
      898,  898,  898,  898,  898,  898,  898,  898,  445,  446,
      292,   88,   27,   27,  293,  294,  292,  292,  292,  292,
      292,  295,  295,  447,  292,  292,  292,  292,  292,  292,
      292,  295,  297,  292,   88,   27,   27,  288,  289,  898,
      898,  898,  898,  898,  898,  898,  298,  898,  898,  898,
      898,  898,  898,  898,  898,  291,   88,   27,  174,  448,
      449,  898,  898,  898,  898,  898,  898,  898,  898,  898,

      898,  898,  898,  898,  898,  898,  898,  450,   88,   27,
       27,  435,  436,  898,  898,  898,  898,  898,  898,  898,
      451,  898,  898,  898,  898,  898,  898,  898,  898,  438,
       88,   27,  174,  453,  454,  898,  898,  898,  898,  898,
      455,  455,  898,  898,  898,  898,  898,  898,  898,  898,
      455,  456,  394,  898,  395,  898,  898,  898,  898,  898,
      396,  396,  397,  898,  898,  898,  898,  898,  898,  898,
      396,   64,  898,  394,  898,  421,  898,  898,  898,  898,
      898,  422,  422,  423,  898,  898,  898,  898,  898,  898,
      898,  422,  424,  188,  898,   58,  898,  459,  898,  898,

      460,  898,  898,  461,  461,  462,  898,  898,  898,  898,
      898,  898,  898,  461,  463,  188,  898,   58,  898,  898,
      898,  898,  465,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  466,  188,  898,   58,
      898,  306,  898,  898,  307,  898,  898,  898,  898,  308,
      898,  898,  898,  898,  898,  898,  898,  898,  309,  188,
      898,   58,  898,  306,  898,  898,  307,  898,  898,  898,
      898,  308,  898,  898,  898,  898,  898,  898,  898,  898,
      309,  188,  898,  114,  467,  468,  898,  898,  469,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,

      898,  898,  470,  188,  898,   58,  898,  471,  898,  898,
      472,  898,  898,  898,  898,  473,  898,  898,  898,  898,
      898,  898,  898,  898,  474,  188,  898,   58,  898,  344,
      898,  898,  345,  898,  898,  346,  346,  475,  898,  898,
      898,  898,  898,  898,  898,  346,  476,  188,  898,  206,
      898,  478,  898,  898,  479,  898,  898,  480,  480,  481,
      898,  898,  898,  898,  898,  898,  898,  480,  482,  188,
      898,   58,  898,  344,  898,  898,  345,  898,  898,  346,
      346,  475,  898,  898,  898,  898,  898,  898,  898,  346,
      476,  188,  898,   58,  898,  483,  898,  898,  484,  898,

      898,  898,  898,  485,  898,  898,  898,  898,  898,  898,
      898,  898,  486,  188,  898,   58,  898,  488,  898,  898,
      489,  898,  898,  490,  490,  491,  898,  898,  898,  898,
      898,  898,  898,  490,  492,   58,  898,  206,  898,  316,
      898,  898,  317,  898,  898,  898,  898,  335,  898,  898,
      898,  898,  898,  898,  493,   58,  898,  206,  898,  316,
      898,  898,  317,  898,  898,  898,  898,  335,   58,  898,
      337,  494,  495,  898,  898,  496,  898,  898,  898,  898,
      497,  188,  898,   58,  898,  483,  898,  898,  484,  898,
      898,  898,  898,  498,   58,  898,  202,  499,  198,  898,

      898,  199,  898,  898,  200,  200,  898,  898,  898,  898,
      898,  898,  898,  898,  200,   58,  898,  202,  500,  212,
      898,  898,  213,   58,  898,   58,  898,  198,  898,  898,
      199,  898,  898,  200,  200,  201,  898,  898,  898,  898,
      898,  898,  898,  200,   58,  898,   58,  898,  898,  898,
      898,  203,  898,  898,  898,  898,  204,   58,  898,  502,
      898,  503,  898,  898,  504,  898,  898,  505,  505,  506,
      898,  898,  898,  898,  898,  898,  898,  505,   58,  898,
       58,  898,  212,  898,  898,  213,  898,  898,  898,  898,
      214,   58,  898,  502,  898,  898,  898,  898,  509,  898,

      898,  898,  898,  510,   58,  898,   58,  898,  898,  898,
      898,  203,  898,  898,  898,  898,  204,   58,  898,  511,
      512,  207,  898,  898,  208,  898,  898,  209,  209,  513,
      898,  898,  898,  898,  898,  898,  898,  209,   58,  898,
      898,  514,  898,  898,  898,  332,  898,  898,  898,  898,
      333,  188,  898,  206,  898,  478,  898,  898,  479,  898,
      898,  480,  480,  515,  898,  898,  898,  898,  898,  898,
      898,  480,   58,  898,  206,  898,  207,  898,  898,  208,
      898,  898,  209,  209,  210,  898,  898,  898,  898,  898,
      898,  898,  209,   58,  898,  206,  898,  898,  898,  898,

      518,  898,  898,  898,  898,  519,   58,  898,  502,  898,
      503,  898,  898,  504,  898,  898,  505,  505,  506,  898,
      898,  898,  898,  898,  898,  898,  505,   58,  898,  502,
      898,  521,  898,  898,  522,  898,  898,  898,  898,  523,
       64,  898,   79,  898,  379,  898,  898,  898,  898,  898,
      380,  380,  524,  898,  898,  898,  898,  898,  898,  898,
      380,  382,   64,  898,  898,  898,  359,  898,  898,  898,
      898,  898,  898,  898,  360,  898,  898,  898,  898,  898,
      898,  898,  898,  361,   64,  898,   79,  898,  356,  898,
      898,  898,  898,  898,  898,  898,  371,  898,  898,  898,

      898,  898,  898,  898,  898,  358,   64,  898,  146,  525,
      526,  898,  898,  898,  898,  898,  898,  898,  527,  898,
      898,  898,  898,  898,  898,  898,  898,  528,   64,  898,
       79,  898,  529,  898,  898,  898,  898,  898,  898,  898,
      530,  898,  898,  898,  898,  898,  898,  898,  898,  531,
       64,  898,  898,  898,  359,  898,  898,  898,  898,  898,
      898,  898,  386,  898,  898,  898,  898,  898,  898,  898,
      898,  361,   64,  898,  135,  532,  533,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  534,   64,  898,  898,  898,  359,  898,

      898,  898,  898,  898,  898,  898,  386,  898,  898,  898,
      898,  898,  898,  898,  898,  361,   64,  898,   79,  898,
      529,  898,  898,  898,  898,  898,  898,  898,  535,  898,
      898,  898,  898,  898,  898,  898,  898,  531,   64,  898,
      898,  898,  359,  898,  898,  898,  898,  898,  898,  898,
      360,  898,  898,  898,  898,  898,  898,  898,  898,  361,
       64,  898,  898,  898,  359,  898,  898,  898,  898,  898,
      898,  898,  360,  898,  898,  898,  898,  898,  898,  898,
      898,  361,   64,  898,  898,  898,  152,  898,  898,  898,
      898,  898,  153,  153,  228,  898,  898,  898,  898,  898,

      898,  898,  153,  229,   64,  898,  251,  898,  537,  898,
      898,  898,  898,  898,  538,  538,  539,  898,  898,  898,
      898,  898,  898,  898,  538,  540,   64,  898,  898,  898,
      152,  898,  898,  898,  898,  898,  153,  153,  228,  898,
      898,  898,  898,  898,  898,  898,  153,  229,   64,  898,
      898,  898,  235,  898,  898,  898,  898,  898,  898,  898,
      236,  898,  898,  898,  898,  898,  898,  898,  898,  237,
       64,  898,  258,  542,  356,  898,  898,  898,  898,  898,
      898,  898,  543,  898,  898,  898,  898,  898,  898,  898,
      898,  358,   64,  898,   79,  898,  231,  898,  898,  898,

      898,  898,  232,  232,  233,  898,  898,  898,  898,  898,
      898,  898,  232,  234,   64,  898,  251,  898,  537,  898,
      898,  898,  898,  898,  538,  538,  539,  898,  898,  898,
      898,  898,  898,  898,  538,  540,   64,  898,   79,  898,
      231,  898,  898,  898,  898,  898,  232,  232,  233,  898,
      898,  898,  898,  898,  898,  898,  232,  234,   64,  898,
       79,  898,  379,  898,  898,  898,  898,  898,  380,  380,
      524,  898,  898,  898,  898,  898,  898,  898,  380,  382,
       64,  898,  251,  898,  546,  898,  898,  898,  898,  898,
      898,  898,  547,  898,  898,  898,  898,  898,  898,  898,

      898,  548,   64,  898,  898,  898,  235,  898,  898,  898,
      898,  898,  898,  898,  236,  898,  898,  898,  898,  898,
      898,  898,  898,  237,   64,  898,  898,  898,  359,  898,
      898,  898,  898,  898,  898,  898,  360,  898,  898,  898,
      898,  898,  898,  898,  898,  361,   64,  898,   76,  549,
      359,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  361,   64,  898,
      251,  898,  551,  898,  898,  898,  898,  898,  552,  552,
      553,  898,  898,  898,  898,  898,  898,  898,  552,  554,
       64,  898,  394,  898,  555,  898,  898,  898,  898,  898,

      898,  898,  556,  898,  898,  898,  898,  898,  898,  898,
      898,  557,  394,  898,  395,  898,  898,  898,  898,  898,
      396,  396,  397,  898,  898,  898,  898,  898,  898,  898,
      396,  394,  898,  395,  898,  898,  898,  898,  898,  396,
      396,  397,  898,  898,  898,  898,  898,  898,  559,  396,
      410,  560,  898,  898,  898,  898,  898,  898,  898,  898,
      561,  898,  898,  898,  898,  898,  898,  393,  394,  898,
      398,  898,  898,  898,  898,  898,  898,  898,  399,  898,
      898,  898,  898,  898,  898,  562,  410,  563,  398,  898,
      898,  898,  898,  898,  898,  898,  564,  256,  565,  252,

      898,  898,  898,  898,  898,  253,  253,  566,  898,  898,
      898,  898,  898,  898,  898,  253,  256,  568,  267,  898,
      898,  898,  898,  898,  898,  898,  569,  251,  898,  252,
      898,  898,  898,  898,  898,  253,  253,  254,  898,  898,
      898,  898,  898,  898,  898,  253,   64,  898,  394,  898,
      421,  898,  898,  898,  898,  898,  422,  422,  423,  898,
      898,  898,  898,  898,  898,  898,  422,  424,   64,  898,
      394,  898,  421,  898,  898,  898,  898,  898,  422,  422,
      423,  898,  898,  898,  898,  898,  898,  898,  422,  424,
       64,  898,  394,  898,  555,  898,  898,  898,  898,  898,

      898,  898,  556,  898,  898,  898,  898,  898,  898,  898,
      898,  557,   64,  898,  394,  898,  581,  898,  898,  898,
      898,  898,  582,  582,  583,  898,  898,  898,  898,  898,
      898,  898,  582,  584,   64,  898,  251,  898,  546,  898,
      898,  898,  898,  898,  898,  898,  585,  251,  898,  267,
      898,  898,  898,  898,  898,  898,  898,  268,  898,  898,
      898,  898,  898,  898,  425,  251,  586,  267,  898,  898,
      898,  898,  898,  898,  898,  268,   23,  898,  898,  898,
      898,  898,   24,   24,   25,  898,  898,  898,  898,  898,
      898,  898,   24,  292,   88,   27,   27,  293,  294,  292,

      292,  292,  292,  292,  295,  295,  296,  292,  292,  292,
      292,  292,  292,  292,  295,  297,  292,   88,   27,   27,
      435,  436,  898,  898,  898,  898,  898,  898,  898,  437,
      898,  898,  898,  898,  898,  898,  898,  898,  438,   88,
       27,   27,  435,  436,  898,  898,  898,  898,  898,  898,
      898,  451,  898,  898,  898,  898,  898,  898,  898,  898,
      438,   88,   27,  174,  587,  588,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  589,  180,   88,   27,   27,  181,  182,  180,
      180,  180,  180,  180,  183,  183,  286,  180,  180,  180,

      180,  180,  180,  180,  183,  287,  180,   88,   27,   27,
      288,  289,  898,  898,  898,  898,  898,  898,  898,  290,
      898,  898,  898,  898,  898,  898,  898,  898,  291,   64,
      898,  251,  898,  546,  898,  898,  898,  898,  898,  898,
      898,  547,  898,  898,  898,  898,  898,  898,  898,  898,
      548,   88,   27,   27,  288,  289,  898,  898,  898,  898,
      898,  898,  898,  290,  898,  898,  898,  898,  898,  898,
      898,  898,  291,   64,  898,  251,  898,  551,  898,  898,
      898,  898,  898,  552,  552,  553,  898,  898,  898,  898,
      898,  898,  898,  552,  554,  188,  898,   58,  898,  459,

      898,  898,  460,  898,  898,  461,  461,  462,  898,  898,
      898,  898,  898,  898,  898,  461,  463,  188,  898,   58,
      898,  459,  898,  898,  460,  898,  898,  461,  461,  462,
      898,  898,  898,  898,  898,  898,  898,  461,  463,  188,
      898,   58,  898,  471,  898,  898,  472,  898,  898,  898,
      898,  473,  898,  898,  898,  898,  898,  898,  898,  898,
      474,  188,  898,  114,  593,  594,  898,  898,  595,  898,
      898,  596,  596,  898,  898,  898,  898,  898,  898,  898,
      898,  596,  597,  188,  898,   58,  898,  898,  898,  898,
      465,  898,  898,  898,  898,  898,  898,  898,  898,  898,

      898,  898,  898,  898,  466,  188,  898,   58,  898,  898,
      898,  898,  465,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  466,  188,  898,   58,
      898,  898,  898,  898,  465,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  466,  188,
      898,  206,  898,  598,  898,  898,  599,  898,  898,  898,
      898,  600,  898,  898,  898,  898,  898,  898,  898,  898,
      601,  188,  898,   58,  898,  483,  898,  898,  484,  898,
      898,  898,  898,  485,  898,  898,  898,  898,  898,  898,
      898,  898,  486,  188,  898,   58,  898,  483,  898,  898,

      484,  898,  898,  898,  898,  485,  898,  898,  898,  898,
      898,  898,  898,  898,  486,  188,  898,   58,  898,  602,
      898,  898,  603,  898,  898,  898,  898,  604,  898,  898,
      898,  898,  898,  898,  898,  898,  605,  188,  898,   58,
      898,  471,  898,  898,  472,  898,  898,  898,  898,  473,
      898,  898,  898,  898,  898,  898,  898,  898,  474,  188,
      898,  114,  606,  607,  898,  898,  608,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      609,  188,  898,  323,  611,  612,  898,  898,  613,  898,
      898,  614,  614,  898,  898,  898,  898,  898,  898,  898,

      898,  614,  615,  188,  898,   58,  898,  488,  898,  898,
      489,  898,  898,  490,  490,  616,  898,  898,  898,  898,
      898,  898,  898,  490,  492,  188,  898,  206,  898,  478,
      898,  898,  479,  898,  898,  480,  480,  515,  898,  898,
      898,  898,  898,  898,  898,  480,  482,  188,  898,  206,
      898,  478,  898,  898,  479,  898,  898,  480,  480,  515,
      898,  898,  898,  898,  898,  898,  898,  480,  482,  188,
      898,  206,  898,  598,  898,  898,  599,  898,  898,  898,
      898,  617,  898,  898,  898,  898,  898,  898,  898,  898,
      601,  618,  188,  898,  337,  619,  620,  618,  618,  621,

      618,  618,  622,  622,  623,  618,  618,  618,  618,  618,
      618,  618,  622,  624,  618,  188,  898,  206,  898,  626,
      898,  898,  627,  898,  898,  628,  628,  629,  898,  898,
      898,  898,  898,  898,  898,  628,  630,  188,  898,  323,
      631,  632,  898,  898,  633,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  634,  188,
      898,   58,  898,  602,  898,  898,  603,  898,  898,  898,
      898,  635,  898,  898,  898,  898,  898,  898,  898,  898,
      605,  188,  898,   58,  898,  488,  898,  898,  489,  898,
      898,  490,  490,  616,  898,  898,  898,  898,  898,  898,

      898,  490,  492,  188,  898,  323,  637,  638,  898,  898,
      639,  898,  898,  640,  640,  898,  898,  898,  898,  898,
      898,  898,  898,  640,  641,   58,  898,  502,  898,  521,
      898,  898,  522,  898,  898,  898,  898,  523,   58,  898,
      206,  898,  316,  898,  898,  317,  898,  898,  898,  898,
      318,  898,  898,  898,  898,  898,  898,  493,   58,  898,
      206,  898,  316,  898,  898,  317,  898,  898,  898,  898,
      318,   58,  898,  644,  898,  645,  898,  898,  646,  898,
      898,  647,  647,  648,  898,  898,  898,  898,  898,  898,
      898,  647,   58,  898,  644,  898,  649,  898,  898,  650,

      898,  898,  898,  898,  651,   58,  898,  502,  898,  503,
      898,  898,  504,  898,  898,  505,  505,  652,  898,  898,
      898,  898,  898,  898,  898,  505,   58,  898,  502,  898,
      503,  898,  898,  504,  898,  898,  505,  505,  652,  898,
      898,  898,  898,  898,  898,  655,  505,   58,  898,  502,
      898,  521,  898,  898,  522,  898,  898,  898,  898,  656,
       58,  898,  658,  659,  660,  898,  898,  661,  898,  898,
      662,  662,  663,  898,  898,  898,  898,  898,  898,  898,
      662,   58,  898,  644,  898,  898,  898,  898,  665,  898,
      898,  898,  898,  666,   58,  898,  502,  898,  898,  898,

      898,  509,  898,  898,  898,  898,  667,   58,  898,  502,
      898,  898,  898,  898,  509,  898,  898,  898,  898,  667,
       58,  898,  898,  668,  898,  898,  898,  669,  898,  898,
      898,  898,  670,   58,  898,  206,  898,  898,  898,  898,
      518,  898,  898,  898,  898,  671,   58,  898,  206,  336,
      207,  898,  898,  208,  898,  898,  209,  209,  331,  898,
      898,  898,  898,  898,  898,  898,  209,   58,  898,  206,
      898,  898,  898,  898,  518,  898,  898,  898,  898,  519,
       58,  898,  206,  898,  898,  898,  898,  518,  898,  898,
      898,  898,  671,   58,  898,  898,  674,  898,  898,  898,

      675,  898,  898,  898,  898,  676,  188,  898,  644,  898,
      678,  898,  898,  679,  898,  898,  680,  680,  681,  898,
      898,  898,  898,  898,  898,  898,  680,  682,   58,  898,
      658,  684,  685,  898,  898,  686,  898,  898,  898,  898,
      687,   64,  898,  146,  689,  690,  898,  898,  898,  898,
      898,  691,  691,  692,  898,  898,  898,  898,  898,  898,
      898,  691,  693,   64,  898,  251,  898,  546,  898,  898,
      898,  898,  898,  898,  898,  547,  898,  898,  898,  898,
      898,  898,  898,  898,  548,   64,  898,   79,  898,  356,
      898,  898,  898,  898,  898,  898,  898,  357,  898,  898,

      898,  898,  898,  898,  898,  898,  358,   64,  898,   79,
      375,  356,  898,  898,  898,  898,  898,  898,  898,  357,
      898,  898,  898,  898,  898,  898,  898,  898,  358,   64,
      898,   79,  898,  529,  898,  898,  898,  898,  898,  898,
      898,  535,  898,  898,  898,  898,  898,  898,  898,  898,
      531,   64,  898,   79,  898,  529,  898,  898,  898,  898,
      898,  898,  898,  530,  898,  898,  898,  898,  898,  898,
      898,  898,  531,   64,  898,  251,  898,  696,  898,  898,
      898,  898,  898,  898,  898,  697,  898,  898,  898,  898,
      898,  898,  898,  898,  698,   64,  898,  898,  898,  359,

      898,  898,  898,  898,  898,  898,  898,  360,  898,  898,
      898,  898,  898,  898,  898,  898,  361,   64,  898,  898,
      898,  359,  898,  898,  898,  898,  898,  898,  898,  360,
      898,  898,  898,  898,  898,  898,  898,  898,  361,   64,
      898,  146,  699,  700,  898,  898,  898,  898,  898,  898,
      898,  701,  898,  898,  898,  898,  898,  898,  898,  898,
      702,   64,  898,  251,  898,  537,  898,  898,  898,  898,
      898,  538,  538,  567,  898,  898,  898,  898,  898,  898,
      898,  538,  540,   64,  898,  251,  898,  537,  898,  898,
      898,  898,  898,  538,  538,  567,  898,  898,  898,  898,

      898,  898,  898,  538,  540,   64,  898,  405,  704,  705,
      898,  898,  898,  898,  898,  706,  706,  707,  898,  898,
      898,  898,  898,  898,  898,  706,  708,   64,  898,  251,
      898,  551,  898,  898,  898,  898,  898,  552,  552,  709,
      898,  898,  898,  898,  898,  898,  898,  552,  554,   64,
      898,  394,  898,  581,  898,  898,  898,  898,  898,  582,
      582,  583,  898,  898,  898,  898,  898,  898,  898,  582,
      584,   64,  898,  251,  898,  551,  898,  898,  898,  898,
      898,  552,  552,  553,  898,  898,  898,  898,  898,  898,
      898,  552,  554,   64,  898,   79,  688,  379,  898,  898,

      898,  898,  898,  380,  380,  381,  898,  898,  898,  898,
      898,  898,  898,  380,  382,   64,  898,  405,  710,  711,
      898,  898,  898,  898,  898,  898,  898,  712,  898,  898,
      898,  898,  898,  898,  898,  898,  713,   64,  898,  251,
      898,  696,  898,  898,  898,  898,  898,  898,  898,  714,
      898,  898,  898,  898,  898,  898,  898,  898,  698,   64,
      898,  394,  898,  715,  898,  898,  898,  898,  898,  898,
      898,  716,  898,  898,  898,  898,  898,  898,  898,  898,
      717,   64,  898,  405,  719,  720,  898,  898,  898,  898,
      898,  721,  721,  722,  898,  898,  898,  898,  898,  898,

      898,  721,  723,   64,  898,  394,  898,  555,  898,  898,
      898,  898,  898,  898,  898,  556,  898,  898,  898,  898,
      898,  898,  898,  898,  557,   64,  898,  410,  724,  555,
      898,  898,  898,  898,  898,  898,  898,  725,  898,  898,
      898,  898,  898,  898,  898,  898,  557,   64,  898,  394,
      898,  715,  898,  898,  898,  898,  898,  898,  898,  716,
      898,  898,  898,  898,  898,  898,  898,  898,  717,   64,
      898,  394,  898,  421,  898,  898,  898,  898,  898,  422,
      422,  423,  898,  898,  898,  898,  898,  898,  898,  422,
      394,  898,  395,  898,  898,  898,  898,  898,  396,  396,

      397,  898,  898,  898,  898,  898,  898,  898,  396,  394,
      726,  395,  898,  898,  898,  898,  898,  396,  396,  397,
      898,  898,  898,  898,  898,  898,  898,  396,   64,  898,
      394,  898,  555,  898,  898,  898,  898,  898,  898,  898,
      556,  394,  727,  398,  898,  898,  898,  898,  898,  898,
      898,  399,  251,  898,  252,  898,  898,  898,  898,  898,
      253,  253,  254,  898,  898,  898,  898,  898,  898,  898,
      253,  251,  570,  252,  898,  898,  898,  898,  898,  253,
      253,  400,  898,  898,  898,  898,  898,  898,  898,  253,
      251,  586,  267,  898,  898,  898,  898,  898,  898,  898,

      403,   64,  898,  394,  898,  421,  898,  898,  898,  898,
      898,  422,  422,  423,  898,  898,  898,  898,  898,  898,
      898,  422,  424,   64,  898,  394,  898,  581,  898,  898,
      898,  898,  898,  582,  582,  583,  898,  898,  898,  898,
      898,  898,  898,  582,  584,   88,   27,   27,  435,  436,
      898,  898,  898,  898,  898,  898,  898,  437,  898,  898,
      898,  898,  898,  898,  898,  898,  438,   88,   27,   27,
      435,  436,  898,  898,  898,  898,  898,  898,  898,  437,
      898,  898,  898,  898,  898,  898,  898,  898,  438,  188,
      898,   58,  898,  488,  898,  898,  489,  898,  898,  490,

      490,  491,  898,  898,  898,  898,  898,  898,  898,  490,
      492,  188,  898,  206,  898,  626,  898,  898,  627,  898,
      898,  628,  628,  736,  898,  898,  898,  898,  898,  898,
      898,  628,  630,  188,  898,   58,  898,  488,  898,  898,
      489,  898,  898,  490,  490,  491,  898,  898,  898,  898,
      898,  898,  898,  490,  492,  188,  898,   58,  898,  602,
      898,  898,  603,  898,  898,  898,  898,  604,  898,  898,
      898,  898,  898,  898,  898,  898,  605,  188,  898,  206,
      898,  598,  898,  898,  599,  898,  898,  898,  898,  617,
      898,  898,  898,  898,  898,  898,  898,  898,  601,  188,

      898,  206,  898,  598,  898,  898,  599,  898,  898,  898,
      898,  617,  898,  898,  898,  898,  898,  898,  898,  898,
      601,  188,  898,  337,  737,  738,  898,  898,  739,  898,
      898,  898,  898,  740,  898,  898,  898,  898,  898,  898,
      898,  898,  741,  188,  898,  206,  898,  742,  898,  898,
      743,  898,  898,  898,  898,  744,  898,  898,  898,  898,
      898,  898,  898,  898,  745,  188,  898,   58,  898,  602,
      898,  898,  603,  898,  898,  898,  898,  635,  898,  898,
      898,  898,  898,  898,  898,  898,  605,  188,  898,  323,
      746,  747,  898,  898,  748,  898,  898,  898,  898,  898,

      898,  898,  898,  898,  898,  898,  898,  898,  749,  188,
      898,  206,  898,  742,  898,  898,  743,  898,  898,  898,
      898,  750,  898,  898,  898,  898,  898,  898,  898,  898,
      745,  188,  898,   58,  898,  344,  898,  898,  345,  898,
      898,  346,  346,  475,  898,  898,  898,  898,  898,  898,
      898,  346,  476,  188,  898,  502,  898,  752,  898,  898,
      753,  898,  898,  754,  754,  755,  898,  898,  898,  898,
      898,  898,  898,  754,  756,  188,  898,   58,  898,  344,
      898,  898,  345,  898,  898,  346,  346,  475,  898,  898,
      898,  898,  898,  898,  898,  346,  476,  188,  898,   58,

      898,  483,  898,  898,  484,  898,  898,  898,  898,  485,
      898,  898,  898,  898,  898,  898,  898,  898,  486,  188,
      898,  206,  898,  478,  898,  898,  479,  898,  898,  480,
      480,  481,  898,  898,  898,  898,  898,  898,  898,  480,
      482,  188,  898,  502,  898,  752,  898,  898,  753,  898,
      898,  754,  754,  755,  898,  898,  898,  898,  898,  898,
      898,  754,  756,  188,  898,  206,  898,  478,  898,  898,
      479,  898,  898,  480,  480,  481,  898,  898,  898,  898,
      898,  898,  898,  480,  482,  188,  898,  206,  898,  626,
      898,  898,  627,  898,  898,  628,  628,  736,  898,  898,

      898,  898,  898,  898,  898,  628,  630,  188,  898,  502,
      898,  762,  898,  898,  763,  898,  898,  898,  898,  764,
      898,  898,  898,  898,  898,  898,  898,  898,  765,  188,
      898,   58,  898,  483,  898,  898,  484,  898,  898,  898,
      898,  485,  898,  898,  898,  898,  898,  898,  898,  898,
      486,  188,  898,  502,  898,  768,  898,  898,  769,  898,
      898,  770,  770,  771,  898,  898,  898,  898,  898,  898,
      898,  770,  772,  188,  898,  644,  898,  773,  898,  898,
      774,  898,  898,  898,  898,  775,  898,  898,  898,  898,
      898,  898,  898,  898,  776,   58,  898,  644,  898,  645,

      898,  898,  646,  898,  898,  647,  647,  648,  898,  898,
      898,  898,  898,  898,  898,  647,   58,  898,  644,  898,
      645,  898,  898,  646,  898,  898,  647,  647,  648,  898,
      898,  898,  898,  898,  898,  779,  647,   58,  898,  644,
      898,  649,  898,  898,  650,  898,  898,  898,  898,  651,
      664,  780,  898,  898,  898,  898,  898,  898,  898,  898,
      781,  898,  898,  898,  898,  898,  898,  643,   58,  898,
      644,  898,  649,  898,  898,  650,  898,  898,  898,  898,
      651,  898,  898,  898,  898,  898,  898,  782,  664,  783,
      898,  898,  898,  898,  898,  898,  898,  898,  784,  898,

      898,  898,  898,  898,  898,  647,   58,  898,  508,  785,
      503,  898,  898,  504,  898,  898,  505,  505,  786,  898,
      898,  898,  898,  898,  898,  898,  505,   58,  898,  898,
      658,  898,  898,  898,  653,  898,  898,  898,  898,  654,
       58,  898,  508,  788,  521,  898,  898,  522,  898,  898,
      898,  898,  789,   58,  898,  502,  898,  503,  898,  898,
      504,  898,  898,  505,  505,  506,  898,  898,  898,  898,
      898,  898,  898,  505,   58,  898,  502,  898,  898,  898,
      898,  509,  898,  898,  898,  898,  510,   58,  898,  502,
      898,  521,  898,  898,  522,  898,  898,  898,  898,  523,

       58,  898,  644,  898,  898,  898,  898,  665,  898,  898,
      898,  898,  666,   58,  898,  644,  898,  898,  898,  898,
      665,  898,  898,  898,  898,  666,   58,  898,  898,  791,
      898,  898,  898,  665,  898,  898,  898,  898,  792,   58,
      898,  898,  793,  898,  898,  898,  509,  898,  898,  898,
      898,  794,   58,  898,  502,  898,  898,  898,  898,  509,
      898,  898,  898,  898,  510,   58,  898,  502,  898,  898,
      898,  898,  509,  898,  898,  898,  898,  510,   58,  898,
      502,  795,  898,  898,  898,  509,  898,  898,  898,  898,
      510,   58,  898,  898,  796,  898,  898,  898,  518,  898,

      898,  898,  898,  797,   58,  898,  206,  898,  898,  898,
      898,  518,  898,  898,  898,  898,  519,   58,  898,  206,
      337,  898,  898,  898,  518,  898,  898,  898,  898,  519,
      188,  898,  644,  898,  678,  898,  898,  679,  898,  898,
      680,  680,  681,  898,  898,  898,  898,  898,  898,  898,
      680,  682,  188,  898,  644,  898,  678,  898,  898,  679,
      898,  898,  680,  680,  681,  898,  898,  898,  898,  898,
      898,  898,  680,  682,  188,  898,  644,  898,  773,  898,
      898,  774,  898,  898,  898,  898,  775,  898,  898,  898,
      898,  898,  898,  898,  898,  776,  188,  898,  644,  898,

      801,  898,  898,  802,  898,  898,  803,  803,  804,  898,
      898,  898,  898,  898,  898,  898,  803,  805,  188,  898,
      502,  898,  762,  898,  898,  763,  898,  898,  898,  898,
      806,   64,  898,   79,  898,  379,  898,  898,  898,  898,
      898,  380,  380,  524,  898,  898,  898,  898,  898,  898,
      898,  380,  382,   64,  898,  251,  898,  551,  898,  898,
      898,  898,  898,  552,  552,  553,  898,  898,  898,  898,
      898,  898,  898,  552,  554,   64,  898,   79,  898,  379,
      898,  898,  898,  898,  898,  380,  380,  524,  898,  898,
      898,  898,  898,  898,  898,  380,  382,   64,  898,   79,

      898,  529,  898,  898,  898,  898,  898,  898,  898,  535,
      898,  898,  898,  898,  898,  898,  898,  898,  531,   64,
      898,  251,  898,  696,  898,  898,  898,  898,  898,  898,
      898,  697,  898,  898,  898,  898,  898,  898,  898,  898,
      698,   64,  898,   79,  691,  529,  898,  898,  898,  898,
      898,  898,  898,  530,  898,  898,  898,  898,  898,  898,
      898,  898,  531,   64,  898,  251,  898,  696,  898,  898,
      898,  898,  898,  898,  898,  714,  898,  898,  898,  898,
      898,  898,  898,  898,  698,   64,  898,  405,  808,  809,
      898,  898,  898,  898,  898,  898,  898,  810,  898,  898,

      898,  898,  898,  898,  898,  898,  811,   64,  898,  251,
      898,  537,  898,  898,  898,  898,  898,  538,  538,  539,
      898,  898,  898,  898,  898,  898,  898,  538,  540,   64,
      898,  251,  898,  537,  898,  898,  898,  898,  898,  538,
      538,  539,  898,  898,  898,  898,  898,  898,  898,  538,
      540,   64,  898,  251,  898,  546,  898,  898,  898,  898,
      898,  898,  898,  547,  898,  898,  898,  898,  898,  898,
      898,  898,  548,   64,  898,  251,  898,  551,  898,  898,
      898,  898,  898,  552,  552,  553,  898,  898,  898,  898,
      898,  898,  898,  552,  554,   64,  898,  251,  898,  546,

      898,  898,  898,  898,  898,  898,  898,  547,  898,  898,
      898,  898,  898,  898,  898,  898,  548,   64,  898,  394,
      898,  715,  898,  898,  898,  898,  898,  898,  898,  716,
      898,  898,  898,  898,  898,  898,  898,  898,  717,   64,
      898,  410,  818,  715,  898,  898,  898,  898,  898,  898,
      898,  819,  898,  898,  898,  898,  898,  898,  898,  898,
      717,   64,  898,  394,  898,  555,  898,  898,  898,  898,
      898,  898,  898,  556,  898,  898,  898,  898,  898,  898,
      898,  898,  557,   64,  898,  394,  821,  555,  898,  898,
      898,  898,  898,  898,  898,  556,  898,  898,  898,  898,

      898,  898,  898,  898,  557,  394,  898,  395,  898,  898,
      898,  898,  898,  396,  396,  397,  898,  898,  898,  898,
      898,  898,  898,  396,   64,  898,  394,  898,  421,  898,
      898,  898,  898,  898,  422,  422,  423,  898,  898,  898,
      898,  898,  898,  898,  422,  424,   64,  898,  394,  898,
      581,  898,  898,  898,  898,  898,  582,  582,  583,  898,
      898,  898,  898,  898,  898,  898,  582,  584,   64,  898,
      394,  822,  581,  898,  898,  898,  898,  898,  582,  582,
      583,  898,  898,  898,  898,  898,  898,  898,  582,  584,
      823,  188,  898,  337,  824,  825,  823,  823,  826,  823,

      823,  827,  827,  828,  823,  823,  823,  823,  823,  823,
      823,  827,  829,  823,  188,  898,  206,  898,  598,  898,
      898,  599,  898,  898,  898,  898,  600,  898,  898,  898,
      898,  898,  898,  898,  898,  601,  188,  898,  206,  898,
      598,  898,  898,  599,  898,  898,  898,  898,  600,  898,
      898,  898,  898,  898,  898,  898,  898,  601,  188,  898,
      206,  898,  742,  898,  898,  743,  898,  898,  898,  898,
      750,  898,  898,  898,  898,  898,  898,  898,  898,  745,
      188,  898,  206,  898,  742,  898,  898,  743,  898,  898,
      898,  898,  744,  898,  898,  898,  898,  898,  898,  898,

      898,  745,  188,  898,  502,  898,  832,  898,  898,  833,
      898,  898,  898,  898,  834,  898,  898,  898,  898,  898,
      898,  898,  898,  835,  188,  898,   58,  898,  602,  898,
      898,  603,  898,  898,  898,  898,  604,  898,  898,  898,
      898,  898,  898,  898,  898,  605,  188,  898,   58,  898,
      602,  898,  898,  603,  898,  898,  898,  898,  604,  898,
      898,  898,  898,  898,  898,  898,  898,  605,  188,  898,
      337,  836,  837,  898,  898,  838,  898,  898,  898,  898,
      839,  898,  898,  898,  898,  898,  898,  898,  898,  840,
      841,  188,  898,  658,  842,  843,  841,  841,  844,  841,

      841,  845,  845,  846,  841,  841,  841,  841,  841,  841,
      841,  845,  847,  841,  188,  898,  502,  898,  768,  898,
      898,  769,  898,  898,  770,  770,  848,  898,  898,  898,
      898,  898,  898,  898,  770,  772,  188,  898,  644,  898,
      801,  898,  898,  802,  898,  898,  803,  803,  804,  898,
      898,  898,  898,  898,  898,  898,  803,  805,  188,  898,
      502,  898,  768,  898,  898,  769,  898,  898,  770,  770,
      771,  898,  898,  898,  898,  898,  898,  898,  770,  772,
      625,  188,  898,  206,  823,  626,  625,  625,  627,  625,
      625,  628,  628,  629,  625,  625,  625,  625,  625,  625,

      625,  628,  630,  625,  188,  898,  658,  849,  850,  898,
      898,  851,  898,  898,  898,  898,  852,  898,  898,  898,
      898,  898,  898,  898,  898,  853,  188,  898,  502,  898,
      832,  898,  898,  833,  898,  898,  898,  898,  854,  898,
      898,  898,  898,  898,  898,  898,  898,  835,  188,  898,
      644,  898,  855,  898,  898,  856,  898,  898,  898,  898,
      857,  898,  898,  898,  898,  898,  898,  898,  898,  858,
      859,  188,  898,  658,  860,  861,  859,  859,  862,  859,
      859,  863,  863,  864,  859,  859,  859,  859,  859,  859,
      859,  863,  865,  859,  188,  898,  644,  898,  855,  898,

      898,  856,  898,  898,  898,  898,  857,  898,  898,  898,
      898,  898,  898,  898,  898,  858,   58,  898,  898,  664,
      898,  898,  898,  777,  898,  898,  898,  898,  778,  188,
      898,  644,  898,  678,  898,  898,  679,  898,  898,  680,
      680,  681,  898,  898,  898,  898,  898,  898,  898,  680,
       58,  898,  644,  898,  645,  898,  898,  646,  898,  898,
      647,  647,  648,  898,  898,  898,  898,  898,  898,  898,
      647,   58,  898,  644,  868,  645,  898,  898,  646,  898,
      898,  647,  647,  648,  898,  898,  898,  898,  898,  898,
      898,  647,   58,  898,  644,  898,  649,  898,  898,  650,

      898,  898,  898,  898,  651,   58,  898,  644,  869,  649,
      898,  898,  650,  898,  898,  898,  898,  651,   58,  898,
      502,  898,  503,  898,  898,  504,  898,  898,  505,  505,
      506,  898,  898,  898,  898,  898,  898,  898,  505,   58,
      898,  502,  790,  503,  898,  898,  504,  898,  898,  505,
      505,  652,  898,  898,  898,  898,  898,  898,  898,  505,
       58,  898,  502,  898,  521,  898,  898,  522,  898,  898,
      898,  898,  523,   58,  898,  502,  807,  521,  898,  898,
      522,  898,  898,  898,  898,  656,   58,  898,  644,  898,
      898,  898,  898,  665,  898,  898,  898,  898,  666,   58,

      898,  644,  872,  898,  898,  898,  665,  898,  898,  898,
      898,  666,   58,  898,  502,  898,  898,  898,  898,  509,
      898,  898,  898,  898,  510,   58,  898,  502,  795,  898,
      898,  898,  509,  898,  898,  898,  898,  667,   58,  898,
      206,  337,  898,  898,  898,  518,  898,  898,  898,  898,
      671,  188,  898,  644,  898,  678,  898,  898,  679,  898,
      898,  680,  680,  681,  898,  898,  898,  898,  898,  898,
      898,  680,  682,  508,  876,  898,  898,  898,  898,  898,
      898,  898,  898,  877,  898,  898,  898,  898,  898,  898,
      898,  898,  765,   64,  898,  251,  898,  696,  898,  898,

      898,  898,  898,  898,  898,  697,  898,  898,  898,  898,
      898,  898,  898,  898,  698,   64,  898,  251,  898,  696,
      898,  898,  898,  898,  898,  898,  898,  697,  898,  898,
      898,  898,  898,  898,  898,  898,  698,   64,  898,  251,
      898,  551,  898,  898,  898,  898,  898,  552,  552,  553,
      898,  898,  898,  898,  898,  898,  898,  552,  554,   64,
      898,  251,  820,  551,  898,  898,  898,  898,  898,  552,
      552,  709,  898,  898,  898,  898,  898,  898,  898,  552,
      554,   64,  898,  394,  898,  715,  898,  898,  898,  898,
      898,  898,  898,  716,  898,  898,  898,  898,  898,  898,

      898,  898,  717,   64,  898,  394,  879,  715,  898,  898,
      898,  898,  898,  898,  898,  716,  898,  898,  898,  898,
      898,  898,  898,  898,  717,   64,  898,  394,  898,  555,
      898,  898,  898,  898,  898,  898,  898,  556,  898,  898,
      898,  898,  898,  898,  898,  898,  557,   64,  898,  394,
      898,  581,  898,  898,  898,  898,  898,  582,  582,  583,
      898,  898,  898,  898,  898,  898,  898,  582,  584,  188,
      898,  658,  880,  881,  898,  898,  882,  898,  898,  898,
      898,  883,  898,  898,  898,  898,  898,  898,  898,  898,
      884,   19,   19,   19,   19,   26,   26,   26,   26,   39,

      898,  898,   39,   27,   27,   27,   27,   30,   30,   30,
       30,   52,   52,   52,   52,   57,   57,  898,   57,   63,
       63,   43,  898,  898,   43,   78,  898,  898,   78,   87,
       87,   87,   87,   56,   56,   56,   56,   96,   96,   96,
       96,  101,  101,  101,  101,   99,   99,   99,   99,   58,
       58,  898,   58,   61,   61,  898,   61,  113,  113,  898,
      113,   64,   64,   66,   66,  124,  124,  898,  124,   81,
      898,  898,   81,  134,  898,  898,  134,  135,  898,  898,
      135,   79,  898,  898,   79,  145,  898,  898,  145,  151,
      151,  138,  898,  898,  138,   88,   88,   88,   88,   91,

       91,   91,   91,  165,  165,  165,  165,  173,  173,  173,
      173,  174,  174,  174,  174,  180,  180,  180,  180,  177,
      177,  177,  177,  187,  187,  898,  187,  118,  118,  898,
      118,  197,  197,  898,  197,  202,  202,  898,  202,  205,
      205,  898,  205,  200,  200,  898,  200,  215,  215,  220,
      220,  127,  127,  898,  127,  217,  217,  230,  230,  898,
      230,  153,  153,  238,  238,  149,  898,  898,  149,  250,
      898,  898,  250,  256,  898,  898,  256,  258,  898,  898,
      258,  253,  898,  898,  253,   64,   64,  276,  276,  276,
      276,  168,  168,  168,  168,  273,  273,  273,  273,  183,

      183,  183,  183,   96,   96,   96,   96,  101,  101,  101,
      101,  188,  188,  898,  188,  191,  191,  898,  191,  310,
      310,  898,  310,  209,  209,  898,  209,  322,  322,  898,
      322,  202,  202,  898,  202,  323,  323,  898,  323,  205,
      205,  898,  205,  206,  206,  898,  206,  336,  336,  898,
      336,  343,  343,  898,  343,  327,  327,  898,  327,  215,
      215,  217,  217,  351,  351,  898,  351,  220,  220,  232,
      232,  898,  232,  153,  153,  240,  240,  354,  354,  898,
      354,  365,  365,  898,  365,  238,  238,  372,  372,  898,
      372,  378,  378,  898,  378,  368,  368,  898,  368,  387,

      387,  898,  387,   81,  898,  898,   81,  393,  898,  898,
      393,  396,  898,  898,  396,  250,  898,  898,  250,  251,
      898,  898,  251,  404,  898,  898,  404,  410,  898,  898,
      410,  256,  898,  898,  256,  405,  898,  898,  405,  258,
      898,  898,  258,   78,  898,  898,   78,  146,  898,  898,
      146,  420,  420,  898,  420,  408,  898,  898,  408,  273,
      273,  273,  273,  430,  430,  430,  430,  276,  276,  276,
      276,  183,  183,  183,  183,  295,  295,  295,  295,  433,
      433,  433,  433,  442,  442,  442,  442,  445,  445,  445,
      445,  452,  452,  452,  452,  458,  458,  898,  458,  188,

      188,  898,  188,  464,  464,  898,  464,  191,  191,  898,
      191,  314,  314,  898,  314,  461,  461,  898,  461,  343,
      343,  898,  343,  477,  477,  898,  477,  346,  346,  898,
      346,  487,  487,  898,  487,  209,  209,  898,  209,  341,
      341,  898,  341,  197,  197,  898,  197,  200,  200,  898,
      200,  202,  202,  898,  202,  501,  501,  898,  501,  508,
      508,  898,  508,  205,  205,  898,  205,  206,  206,  898,
      206,  511,  511,  898,  511,  505,  505,  898,  505,  378,
      378,  898,  378,  240,  240,  232,  232,  898,  232,  375,
      375,  898,  375,  380,  380,  898,  380,  390,  390,  898,

      390,  151,  151,  536,  536,  898,  536,  153,  153,  230,
      230,  898,  230,  538,  538,  898,  538,  550,  550,  898,
      550,  422,  422,  898,  422,  393,  898,  898,  393,  394,
      898,  898,  394,  396,  898,  898,  396,  250,  898,  898,
      250,  251,  898,  898,  251,  253,  898,  898,  253,  256,
      898,  898,  256,  410,  898,  898,  410,  258,  898,  898,
      258,  420,  420,  898,  420,  580,  580,  898,  580,  295,
      295,  295,  295,  455,  455,  455,  455,  183,  183,  183,
      183,  458,  458,  898,  458,  461,  461,  898,  461,  592,
      592,  898,  592,  464,  464,  898,  464,  480,  480,  898,

      480,  346,  346,  898,  346,  490,  490,  898,  490,  596,
      596,  898,  596,  610,  610,  898,  610,  487,  487,  898,
      487,  477,  477,  898,  477,  625,  625,  898,  625,  614,
      614,  898,  614,  636,  636,  898,  636,  505,  505,  898,
      505,  209,  209,  898,  209,  643,  643,  898,  643,  647,
      647,  898,  647,  501,  501,  898,  501,  502,  502,  898,
      502,  657,  657,  898,  657,  664,  664,  898,  664,  508,
      508,  898,  508,  658,  658,  898,  658,  511,  511,  898,
      511,  205,  205,  898,  205,  337,  337,  898,  337,  677,
      677,  898,  677,  662,  662,  898,  662,  688,  688,  898,

      688,  232,  232,  898,  232,  380,  380,  898,  380,  552,
      552,  898,  552,  240,  240,  691,  691,  898,  691,  536,
      536,  898,  536,  703,  703,  898,  703,  550,  550,  898,
      550,  580,  580,  898,  580,  378,  378,  898,  378,  706,
      706,  898,  706,  582,  582,  898,  582,  718,  718,  898,
      718,  422,  422,  898,  422,  394,  898,  898,  394,  420,
      420,  898,  420,  393,  898,  898,  393,  396,  898,  898,
      396,  250,  898,  898,  250,  253,  898,  898,  253,  410,
      898,  898,  410,  256,  898,  898,  256,  258,  898,  898,
      258,  295,  295,  295,  295,  487,  487,  898,  487,  625,

      625,  898,  625,  490,  490,  898,  490,  480,  480,  898,
      480,  622,  622,  898,  622,  628,  628,  898,  628,  640,
      640,  898,  640,  343,  343,  898,  343,  751,  751,  898,
      751,  346,  346,  898,  346,  477,  477,  898,  477,  754,
      754,  898,  754,  767,  767,  898,  767,  680,  680,  898,
      680,  643,  643,  898,  643,  644,  644,  898,  644,  647,
      647,  898,  647,  501,  501,  898,  501,  502,  502,  898,
      502,  505,  505,  898,  505,  508,  508,  898,  508,  664,
      664,  898,  664,  511,  511,  898,  511,  677,  677,  898,
      677,  800,  800,  898,  800,  378,  378,  898,  378,  550,

      550,  898,  550,  380,  380,  898,  380,  552,  552,  898,
      552,  721,  721,  898,  721,  536,  536,  898,  536,  538,
      538,  898,  538,  582,  582,  898,  582,  422,  422,  898,
      422,  393,  898,  898,  393,  396,  898,  898,  396,  410,
      898,  898,  410,  420,  420,  898,  420,  580,  580,  898,
      580,  480,  480,  898,  480,  628,  628,  898,  628,  770,
      770,  898,  770,  490,  490,  898,  490,  827,  827,  898,
      827,  767,  767,  898,  767,  845,  845,  898,  845,  803,
      803,  898,  803,  644,  644,  898,  644,  677,  677,  898,
      677,  643,  643,  898,  643,  647,  647,  898,  647,  501,

      501,  898,  501,  505,  505,  898,  505,  664,  664,  898,
      664,  508,  508,  898,  508,  511,  511,  898,  511,  552,
      552,  898,  552,  550,  550,  898,  550,  582,  582,  898,
      582,  422,  422,  898,  422,  863,  863,  898,  863,    5,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898
    } ;

static const flex_int16_t yy_chk[9465] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    4,    4,    4,
        6,   11,   72,   13,   17, 1061,    6,    6,    6,   72,
       12,   13,   17,   16,   11,   12,    6,    9,    9,    9,
        9,    9,   16,   12,   24,   34,   16,    9,    9,    9,
       22,   37,   24,   34,   28,  139,  139,    9,   10,   37,
       10,   43,   35,   22,   10,   10,   10,   28, 1006,   43,
       35,  958,  914,   10,   10,   14,   14,   35,   36,   36,
       36,   49,   14,   14,   15,   15,   15,   38,   38,   49,

       71,  142,   15,   15,   80,   38,   44,   69,   71,   69,
      142,   80,   15,   18,  877,   18,   18,   69,   44,   44,
       18,   18,   18,   18,   18,   18,   18,   25,   25,   25,
       68,   74,  877,   96,   68,   25,   25,  912,  911,   74,
       96,   81,   68,   81,   70,   25,   26,   26,   26,   26,
       26,   81,   70,   85,   85,   85,   26,   26,   26,   70,
      904,  902,   86,   94,  140,   94,   26,   30,   30,   30,
       30,   30,   86,   94,  140,   86,  900,   84,  120,   30,
       31,   31,   31,   31,   31,   84,   97,   99,  896,  105,
       31,   31,   84,   97,   99,  103,  103,  105,  103,  120,

       31,   32,  131,   32,  188,   32,  131,  892,   32,  188,
      138,   32,   32,   32,  131,  133,  133,  133,  138,  141,
      141,   32,   33,  188,  890,  146,   33,  889,  149,  141,
      149,  166,   33,   33,   33,  146,  154,  154,  149,  884,
      166,  882,   33,   39,  179,  155,  154,  155,  156,   39,
       39,   39,  257,  220,  179,  155,  156,  881,  880,   39,
       41,  257,   41,  156,  178,  178,  255,  178,   41,   41,
       41,  184,  184,  185,  220,  185,  255,  197,   41,   42,
      221,  184,  199,  185,  197,   42,   42,   42,  879,  199,
      875,  872,  277,  869,   42,   42,   48,   48,   48,   48,

       48,  221,  200,  206,  213,  868,   48,   48,   48,  200,
      206,  213,  244,  277,  244,  206,   48,   50,   50,   50,
       50,   50,  244,  204,  256,  249,  204,  249,  867,   50,
      204,  864,  863,  853,  256,  249,   50,   51,   51,   51,
       51,   51,   52,   52,   52,   52,   52,  253,  258,  253,
      265,  261,   52,   52,   52,  846,  840,  253,  258,  265,
      259,  261,   52,   53,   53,   53,   53,  259,  838,  263,
      837,  263,  288,  288,  836,   53,   54,  301,   54,  263,
      298,  298,  288,  304,   54,   54,   54,  301,  304,  831,
      298,  300,  830,  300,   54,   55,   55,   55,   55,   55,

      401,  300,  304,  335,  335,   55,   55,   55,  828,  401,
      827,  347,  347,  335,   55,   55,   56,   56,   56,   56,
       56,  347,  810,  328,  799,  332,  328,  782,   56,   57,
      328,   57,  332,   57,  370,  370,   57,  332,  402,   57,
       57,   57,  772,  769,  370,  375,  375,  402,  768,   57,
       61,  396,   61,  396,   61,  375,  767,   61,  381,  381,
      763,  396,   61,   62,  762,   62,   62,   62,  381,  405,
       62,  390,  390,   62,   62,  408,  410,  408,  411,  405,
      412,  390,  413,   62,   63,  408,  410,  411,   63,  412,
      414,  414,  413,  415,   63,   63,   63,  754,  417,  418,

      414,  512,  415,  753,   63,   63,   66,  417,  512,  418,
       66,  419,  419,  423,  423,  426,  571,  426,   66,  435,
      435,  419,  752,  423,  751,  426,  571,   66,   67,  435,
       67,   67,   67,  447,  447,  451,  451,  740,   67,   67,
      722,  721,  713,  447,  712,  451,  498,  498,   67,   67,
       75,   75,   75,  502,  515,  515,  498,  517,   75,   75,
      502,  707,  530,  530,  515,  502,  517,  558,   75,   82,
       82,   82,  530,  563,  701,  563,  558,   82,   82,   82,
      567,  567,  570,  563,  568,  699,  568,   82,   83,  692,
      567,  570,   83,  573,  568,  572,  572,  687,   83,   83,

       83,  685,  674,  573,  575,  572,  574,  574,   83,   87,
       87,   87,   87,   87,  575,  576,  574,  577,  577,   87,
       87,   87,  663,  660,  650,  576,  646,  577,  640,   87,
       87,   88,   88,   88,  583,  583,  585,  585,  586,  634,
      586,  630,  628,  627,  583,  626,  585,  625,  586,  616,
      616,   88,   91,   91,   91,   91,   91,  617,  617,  616,
      629,  629,  635,  635,   91,  623,  622,  617,  609,  608,
      629,  607,  635,   91,   92,   92,   92,   92,   92,  644,
      653,  655,  587,  579,   92,   92,  644,  653,  554,  551,
      655,  644,  653,  673,   92,   92,   93,   93,   93,   93,

       93,  550,  673,  546,  681,  681,  700,  702,   93,   95,
       95,   95,   95,   95,  681,  700,  702,  709,  709,  543,
      538,   95,  521,  516,  714,  714,  504,  709,   95,  100,
      100,  100,  100,  100,  714,  717,  717,  497,  729,  100,
      100,  493,  484,  483,  727,  717,  727,  729,  730,  100,
      101,  101,  101,  101,  727,  455,  450,  441,  730,  735,
      737,  440,  101,  104,  104,  104,  104,  104,  735,  737,
      744,  744,  758,  104,  104,  104,  409,  407,  394,  391,
      744,  758,  389,  104,  107,  107,  107,  107,  107,  109,
      387,  109,  382,  109,  759,  380,  109,  775,  775,  109,

      109,  109,  379,  759,  777,  787,  787,  775,  378,  109,
      110,  777,  110,  376,  110,  787,  777,  110,  790,  795,
      369,  355,  110,  353,  351,  349,  796,  790,  795,  110,
      112,  346,  112,  112,  112,  796,  345,  112,  113,  344,
      113,  343,  113,  804,  804,  113,  807,  817,  113,  113,
      113,  820,  342,  804,  823,  807,  817,  341,  113,  114,
      820,  114,  339,  823,  825,  325,  114,  279,  826,  829,
      251,  114,  115,  825,  115,  243,  115,  826,  829,  115,
      839,  845,  115,  115,  115,  849,  848,  848,  231,  839,
      845,  230,  115,  116,  849,  116,  848,  116,  850,  851,

      116,  852,  871,  116,  116,  116,  876,  850,  851,  212,
      852,  871,  116,  116,  118,  876,  118,  208,  118,  852,
      883,  118,  854,  854,  857,  857,  118,  119,  198,  883,
      196,  119,  854,  887,  857,  888,  183,  119,  119,  119,
      182,  181,  887,  180,  888,  177,  176,  119,  119,  121,
      162,  159,  152,  121,  151,  150,  148,  135,  134,  117,
      111,  121,  108,  106,  102,   98,   79,   78,   77,   76,
      121,  122,   73,  122,  122,  122,   64,   59,   58,   40,
       29,   27,   23,    5,    0,    0,    0,    0,    0,    0,
        0,    0,  122,  123,    0,    0,    0,  123,    0,    0,

        0,    0,    0,    0,    0,  123,    0,    0,    0,    0,
        0,    0,    0,    0,  123,  124,    0,    0,    0,  124,
        0,    0,    0,    0,    0,  124,  124,  124,    0,    0,
        0,    0,    0,    0,    0,  124,  124,  125,    0,  125,
        0,  125,    0,    0,    0,    0,    0,  125,  125,  125,
        0,    0,    0,    0,    0,    0,    0,  125,  125,  127,
        0,    0,    0,  127,    0,    0,    0,    0,    0,    0,
        0,  127,    0,    0,    0,    0,    0,    0,    0,    0,
      127,  128,    0,    0,    0,  128,    0,    0,    0,    0,
        0,  128,  128,  128,    0,    0,    0,    0,    0,    0,

        0,  128,  128,  129,    0,  129,    0,    0,    0,    0,
        0,    0,    0,  129,    0,    0,    0,    0,    0,    0,
      129,  130,  130,  130,    0,    0,    0,    0,    0,    0,
        0,  130,  132,  132,    0,    0,    0,    0,    0,    0,
        0,    0,  132,    0,    0,    0,    0,    0,    0,  132,
      136,    0,  136,    0,    0,    0,    0,    0,  136,  136,
      136,    0,    0,    0,    0,    0,    0,    0,  136,  143,
        0,  143,    0,  143,    0,    0,    0,    0,    0,  143,
      143,  143,    0,    0,    0,    0,    0,    0,    0,  143,
      144,  144,  144,    0,    0,    0,    0,    0,    0,    0,

      144,  147,    0,  147,    0,    0,    0,    0,    0,  147,
      147,  147,    0,    0,    0,    0,    0,    0,    0,  147,
      153,    0,    0,    0,  153,    0,    0,    0,    0,    0,
        0,    0,  153,    0,    0,    0,    0,    0,    0,    0,
        0,  153,  157,    0,    0,    0,    0,    0,  157,  157,
      157,  157,    0,    0,    0,    0,    0,    0,  157,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  160,  160,  160,  160,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  160,  161,    0,    0,    0,  161,
        0,    0,    0,    0,    0,    0,    0,  161,    0,    0,
        0,    0,    0,    0,    0,    0,  161,  163,  163,  163,
      163,  163,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  163,  164,
      164,  164,  164,  164,    0,    0,    0,    0,    0,    0,
        0,  164,    0,    0,    0,    0,    0,    0,    0,    0,
      164,  165,  165,  165,  165,  165,    0,    0,    0,    0,
        0,  165,  165,  165,    0,    0,    0,    0,    0,    0,
        0,  165,  165,  168,  168,  168,  168,  168,    0,    0,

        0,    0,    0,    0,    0,  168,    0,    0,    0,    0,
        0,    0,    0,    0,  168,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  170,
      170,  170,  170,  170,    0,    0,    0,    0,    0,    0,
        0,  170,  171,  171,  171,  171,  171,    0,    0,    0,
        0,    0,  171,  171,    0,    0,    0,    0,    0,    0,
        0,    0,  171,  172,  172,    0,    0,    0,    0,    0,
        0,    0,    0,  172,    0,    0,    0,    0,    0,    0,
      172,  173,  173,  173,  173,  173,    0,    0,    0,    0,

        0,  173,  173,  173,    0,    0,    0,    0,    0,    0,
        0,  173,  174,  174,  174,  174,    0,    0,    0,    0,
        0,    0,    0,    0,  174,  187,    0,  187,    0,  187,
        0,    0,  187,    0,    0,  187,  187,  187,    0,    0,
        0,    0,    0,    0,    0,  187,  187,  191,    0,  191,
        0,  191,    0,    0,  191,    0,    0,    0,    0,  191,
        0,    0,    0,    0,    0,    0,    0,    0,  191,  192,
        0,  192,  192,  192,    0,    0,  192,    0,    0,  192,
      192,    0,    0,    0,    0,    0,    0,    0,    0,  192,
      192,  193,    0,  193,    0,  193,    0,    0,  193,    0,

        0,    0,    0,  193,  194,    0,  194,    0,  194,    0,
        0,  194,    0,    0,    0,    0,  194,  195,    0,  195,
        0,  195,    0,    0,  195,    0,    0,    0,    0,  195,
        0,    0,    0,    0,    0,    0,  195,  201,    0,  201,
      201,  201,    0,    0,  201,    0,    0,  201,  201,    0,
        0,    0,    0,    0,    0,    0,    0,  201,  202,    0,
      202,    0,    0,    0,    0,  202,    0,    0,    0,    0,
      202,  203,    0,  203,    0,    0,    0,    0,  203,    0,
        0,    0,    0,  203,  205,    0,  205,    0,  205,    0,
        0,  205,    0,    0,  205,  205,  205,    0,    0,    0,

        0,    0,    0,    0,  205,  207,    0,  207,    0,  207,
        0,    0,  207,    0,    0,  207,  207,  207,    0,    0,
        0,    0,    0,    0,  207,  207,  209,    0,  209,    0,
      209,    0,    0,  209,    0,    0,    0,    0,  209,  210,
        0,  210,  210,  210,    0,    0,  210,    0,    0,  210,
      210,  210,    0,    0,    0,    0,    0,    0,    0,  210,
      211,    0,  211,    0,  211,    0,    0,  211,    0,    0,
      211,  211,  211,    0,    0,    0,    0,    0,    0,    0,
      211,  214,    0,  214,  214,  214,    0,    0,  214,  215,
        0,    0,    0,  215,    0,    0,    0,    0,    0,  215,

      215,  215,    0,    0,    0,    0,    0,    0,    0,  215,
      215,  216,    0,    0,    0,  216,    0,    0,    0,    0,
        0,  216,  216,  216,    0,    0,    0,    0,    0,    0,
        0,  216,  216,  217,    0,    0,    0,  217,    0,    0,
        0,    0,    0,    0,    0,  217,    0,    0,    0,    0,
        0,    0,    0,    0,  217,  218,    0,  218,  218,  218,
        0,    0,    0,    0,    0,  218,  218,    0,    0,    0,
        0,    0,    0,    0,    0,  218,  218,  222,    0,  222,
        0,  222,    0,    0,    0,    0,    0,    0,    0,  222,
        0,    0,    0,    0,    0,    0,    0,    0,  222,  223,

        0,    0,    0,  223,    0,    0,    0,    0,    0,    0,
        0,  223,    0,    0,    0,    0,    0,    0,    0,    0,
      223,  224,    0,    0,    0,  224,    0,    0,    0,    0,
        0,    0,    0,  224,    0,    0,    0,    0,    0,    0,
        0,    0,  224,  225,    0,    0,    0,  225,    0,    0,
        0,    0,    0,    0,    0,  225,    0,    0,    0,    0,
        0,    0,    0,    0,  225,  226,    0,  226,  226,  226,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  226,  227,    0,    0,
        0,  227,    0,    0,    0,    0,    0,    0,    0,  227,

        0,    0,    0,    0,    0,    0,    0,    0,  227,  228,
        0,  228,  228,  228,    0,    0,    0,    0,    0,  228,
      228,    0,    0,    0,    0,    0,    0,    0,    0,  228,
      228,  229,    0,    0,    0,  229,    0,    0,    0,    0,
        0,  229,  229,  229,    0,    0,    0,    0,    0,    0,
        0,  229,  229,  232,    0,  232,    0,  232,    0,    0,
        0,    0,    0,    0,    0,  232,    0,    0,    0,    0,
        0,    0,    0,    0,  232,  233,    0,  233,  233,  233,
        0,    0,    0,    0,    0,  233,  233,  233,    0,    0,
        0,    0,    0,    0,    0,  233,  233,  234,    0,  234,

        0,  234,    0,    0,    0,    0,    0,  234,  234,  234,
        0,    0,    0,    0,    0,    0,    0,  234,  234,  235,
        0,    0,    0,  235,    0,    0,    0,    0,    0,    0,
        0,  235,    0,    0,    0,    0,    0,    0,    0,    0,
      235,  236,    0,  236,  236,  236,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  236,  237,    0,    0,    0,  237,    0,    0,
        0,    0,    0,    0,    0,  237,    0,    0,    0,    0,
        0,    0,    0,    0,  237,  238,    0,    0,    0,  238,
        0,    0,    0,    0,    0,  238,  238,  238,    0,    0,

        0,    0,    0,    0,    0,  238,  238,  240,    0,    0,
        0,  240,    0,    0,    0,    0,    0,    0,    0,  240,
        0,    0,    0,    0,    0,    0,    0,    0,  240,  241,
        0,  241,  241,  241,    0,    0,    0,    0,    0,  241,
      241,    0,    0,    0,    0,    0,    0,    0,    0,  241,
      241,  245,    0,  245,    0,    0,    0,    0,    0,    0,
        0,  245,    0,    0,    0,    0,    0,    0,  245,  246,
      246,  246,    0,    0,    0,    0,    0,    0,    0,  246,
      247,    0,  247,  247,  247,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  247,  248,    0,  248,    0,    0,    0,    0,    0,
      248,  248,  248,    0,    0,    0,    0,    0,    0,    0,
      248,  250,    0,  250,    0,    0,    0,    0,    0,  250,
      250,  250,    0,    0,    0,    0,    0,    0,    0,  250,
      252,    0,  252,    0,    0,    0,    0,    0,  252,  252,
      252,    0,    0,    0,    0,    0,    0,  252,  252,  254,
      254,  254,    0,    0,    0,    0,    0,  254,  254,  254,
        0,    0,    0,    0,    0,    0,    0,  254,  260,  260,
      260,    0,    0,    0,    0,    0,  260,  260,  260,    0,
        0,    0,    0,    0,    0,    0,  260,  262,  262,    0,

        0,    0,    0,    0,    0,    0,    0,  262,    0,    0,
        0,    0,    0,    0,    0,    0,  262,  264,  264,  264,
        0,    0,    0,    0,    0,    0,    0,  264,  266,    0,
      266,    0,  266,    0,    0,    0,    0,    0,  266,  266,
      266,    0,    0,    0,    0,    0,    0,    0,  266,  266,
      267,    0,  267,    0,    0,    0,    0,    0,    0,    0,
      267,    0,    0,    0,    0,    0,    0,  267,  268,  268,
      268,    0,    0,    0,    0,    0,    0,    0,  268,  269,
        0,    0,    0,    0,    0,  269,  269,  269,    0,  269,
        0,    0,    0,    0,    0,  269,  270,  270,  270,  270,

      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      273,  273,  273,  273,  273,    0,    0,    0,    0,    0,
        0,    0,  273,    0,    0,    0,    0,    0,    0,    0,
        0,  273,  274,  274,  274,  274,  274,    0,    0,    0,
        0,    0,  274,  274,    0,    0,    0,    0,    0,    0,
        0,    0,  274,  274,  276,  276,  276,  276,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  276,  278,  278,  278,  278,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  278,  280,  280,
      280,  280,  280,    0,    0,    0,    0,    0,    0,    0,
      280,    0,    0,    0,    0,    0,    0,    0,    0,  280,
      281,  281,  281,  281,  281,    0,    0,    0,    0,    0,
        0,    0,  281,    0,    0,    0,    0,    0,    0,    0,
        0,  281,  282,    0,    0,    0,  282,    0,    0,    0,
        0,    0,    0,    0,  282,    0,    0,    0,    0,    0,
        0,    0,    0,  282,  283,  283,  283,  283,  283,    0,
        0,    0,    0,    0,    0,    0,  283,    0,    0,    0,
        0,    0,    0,    0,    0,  283,  284,  284,  284,  284,

      284,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  284,  286,  286,
      286,  286,  286,    0,    0,    0,    0,    0,  286,  286,
        0,    0,    0,    0,    0,    0,    0,    0,  286,  286,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  289,  289,  289,  289,  289,    0,
        0,    0,    0,    0,    0,    0,  289,    0,    0,    0,
        0,    0,    0,    0,    0,  289,  290,  290,  290,  290,
      290,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  290,  291,  291,
      291,  291,  291,    0,    0,    0,    0,    0,    0,    0,
      291,    0,    0,    0,    0,    0,    0,    0,    0,  291,
      296,  296,  296,  296,  296,    0,    0,    0,    0,    0,
      296,  296,    0,    0,    0,    0,    0,    0,    0,    0,
      296,  296,  299,    0,  299,    0,    0,    0,    0,    0,
      299,  299,  299,    0,    0,    0,    0,    0,    0,    0,
      299,  302,    0,  302,    0,  302,    0,    0,    0,    0,
        0,  302,  302,  302,    0,    0,    0,    0,    0,    0,
        0,  302,  302,  303,    0,  303,    0,  303,    0,    0,

      303,    0,    0,  303,  303,  303,    0,    0,    0,    0,
        0,    0,    0,  303,  303,  305,    0,  305,    0,    0,
        0,    0,  305,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  305,  306,    0,  306,
        0,  306,    0,    0,  306,    0,    0,    0,    0,  306,
        0,    0,    0,    0,    0,    0,    0,    0,  306,  307,
        0,  307,    0,  307,    0,    0,  307,    0,    0,    0,
        0,  307,    0,    0,    0,    0,    0,    0,    0,    0,
      307,  308,    0,  308,  308,  308,    0,    0,  308,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  308,  309,    0,  309,    0,  309,    0,    0,
      309,    0,    0,    0,    0,  309,    0,    0,    0,    0,
        0,    0,    0,    0,  309,  310,    0,  310,    0,  310,
        0,    0,  310,    0,    0,  310,  310,  310,    0,    0,
        0,    0,    0,    0,    0,  310,  310,  311,    0,  311,
        0,  311,    0,    0,  311,    0,    0,  311,  311,  311,
        0,    0,    0,    0,    0,    0,    0,  311,  311,  312,
        0,  312,    0,  312,    0,    0,  312,    0,    0,  312,
      312,  312,    0,    0,    0,    0,    0,    0,    0,  312,
      312,  314,    0,  314,    0,  314,    0,    0,  314,    0,

        0,    0,    0,  314,    0,    0,    0,    0,    0,    0,
        0,    0,  314,  315,    0,  315,    0,  315,    0,    0,
      315,    0,    0,  315,  315,  315,    0,    0,    0,    0,
        0,    0,    0,  315,  315,  316,    0,  316,    0,  316,
        0,    0,  316,    0,    0,    0,    0,  316,    0,    0,
        0,    0,    0,    0,  316,  317,    0,  317,    0,  317,
        0,    0,  317,    0,    0,    0,    0,  317,  318,    0,
      318,  318,  318,    0,    0,  318,    0,    0,    0,    0,
      318,  319,    0,  319,    0,  319,    0,    0,  319,    0,
        0,    0,    0,  319,  320,    0,  320,  320,  320,    0,

        0,  320,    0,    0,  320,  320,    0,    0,    0,    0,
        0,    0,    0,    0,  320,  321,    0,  321,  321,  321,
        0,    0,  321,  322,    0,  322,    0,  322,    0,    0,
      322,    0,    0,  322,  322,  322,    0,    0,    0,    0,
        0,    0,    0,  322,  323,    0,  323,    0,    0,    0,
        0,  323,    0,    0,    0,    0,  323,  324,    0,  324,
        0,  324,    0,    0,  324,    0,    0,  324,  324,  324,
        0,    0,    0,    0,    0,    0,    0,  324,  327,    0,
      327,    0,  327,    0,    0,  327,    0,    0,    0,    0,
      327,  329,    0,  329,    0,    0,    0,    0,  329,    0,

        0,    0,    0,  329,  330,    0,  330,    0,    0,    0,
        0,  330,    0,    0,    0,    0,  330,  331,    0,  331,
      331,  331,    0,    0,  331,    0,    0,  331,  331,  331,
        0,    0,    0,    0,    0,    0,    0,  331,  333,    0,
        0,  333,    0,    0,    0,  333,    0,    0,    0,    0,
      333,  334,    0,  334,    0,  334,    0,    0,  334,    0,
        0,  334,  334,  334,    0,    0,    0,    0,    0,    0,
        0,  334,  336,    0,  336,    0,  336,    0,    0,  336,
        0,    0,  336,  336,  336,    0,    0,    0,    0,    0,
        0,    0,  336,  337,    0,  337,    0,    0,    0,    0,

      337,    0,    0,    0,    0,  337,  338,    0,  338,    0,
      338,    0,    0,  338,    0,    0,  338,  338,  338,    0,
        0,    0,    0,    0,    0,    0,  338,  348,    0,  348,
        0,  348,    0,    0,  348,    0,    0,    0,    0,  348,
      352,    0,  352,    0,  352,    0,    0,    0,    0,    0,
      352,  352,  352,    0,    0,    0,    0,    0,    0,    0,
      352,  352,  354,    0,    0,    0,  354,    0,    0,    0,
        0,    0,    0,    0,  354,    0,    0,    0,    0,    0,
        0,    0,    0,  354,  356,    0,  356,    0,  356,    0,
        0,    0,    0,    0,    0,    0,  356,    0,    0,    0,

        0,    0,    0,    0,    0,  356,  357,    0,  357,  357,
      357,    0,    0,    0,    0,    0,    0,    0,  357,    0,
        0,    0,    0,    0,    0,    0,    0,  357,  358,    0,
      358,    0,  358,    0,    0,    0,    0,    0,    0,    0,
      358,    0,    0,    0,    0,    0,    0,    0,    0,  358,
      359,    0,    0,    0,  359,    0,    0,    0,    0,    0,
        0,    0,  359,    0,    0,    0,    0,    0,    0,    0,
        0,  359,  360,    0,  360,  360,  360,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  360,  361,    0,    0,    0,  361,    0,

        0,    0,    0,    0,    0,    0,  361,    0,    0,    0,
        0,    0,    0,    0,    0,  361,  362,    0,  362,    0,
      362,    0,    0,    0,    0,    0,    0,    0,  362,    0,
        0,    0,    0,    0,    0,    0,    0,  362,  363,    0,
        0,    0,  363,    0,    0,    0,    0,    0,    0,    0,
      363,    0,    0,    0,    0,    0,    0,    0,    0,  363,
      364,    0,    0,    0,  364,    0,    0,    0,    0,    0,
        0,    0,  364,    0,    0,    0,    0,    0,    0,    0,
        0,  364,  365,    0,    0,    0,  365,    0,    0,    0,
        0,    0,  365,  365,  365,    0,    0,    0,    0,    0,

        0,    0,  365,  365,  366,    0,  366,    0,  366,    0,
        0,    0,    0,    0,  366,  366,  366,    0,    0,    0,
        0,    0,    0,    0,  366,  366,  367,    0,    0,    0,
      367,    0,    0,    0,    0,    0,  367,  367,  367,    0,
        0,    0,    0,    0,    0,    0,  367,  367,  368,    0,
        0,    0,  368,    0,    0,    0,    0,    0,    0,    0,
      368,    0,    0,    0,    0,    0,    0,    0,    0,  368,
      371,    0,  371,  371,  371,    0,    0,    0,    0,    0,
        0,    0,  371,    0,    0,    0,    0,    0,    0,    0,
        0,  371,  372,    0,  372,    0,  372,    0,    0,    0,

        0,    0,  372,  372,  372,    0,    0,    0,    0,    0,
        0,    0,  372,  372,  373,    0,  373,    0,  373,    0,
        0,    0,    0,    0,  373,  373,  373,    0,    0,    0,
        0,    0,    0,    0,  373,  373,  374,    0,  374,    0,
      374,    0,    0,    0,    0,    0,  374,  374,  374,    0,
        0,    0,    0,    0,    0,    0,  374,  374,  377,    0,
      377,    0,  377,    0,    0,    0,    0,    0,  377,  377,
      377,    0,    0,    0,    0,    0,    0,    0,  377,  377,
      383,    0,  383,    0,  383,    0,    0,    0,    0,    0,
        0,    0,  383,    0,    0,    0,    0,    0,    0,    0,

        0,  383,  384,    0,    0,    0,  384,    0,    0,    0,
        0,    0,    0,    0,  384,    0,    0,    0,    0,    0,
        0,    0,    0,  384,  385,    0,    0,    0,  385,    0,
        0,    0,    0,    0,    0,    0,  385,    0,    0,    0,
        0,    0,    0,    0,    0,  385,  386,    0,  386,  386,
      386,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  386,  388,    0,
      388,    0,  388,    0,    0,    0,    0,    0,  388,  388,
      388,    0,    0,    0,    0,    0,    0,    0,  388,  388,
      392,    0,  392,    0,  392,    0,    0,    0,    0,    0,

        0,    0,  392,    0,    0,    0,    0,    0,    0,    0,
        0,  392,  393,    0,  393,    0,    0,    0,    0,    0,
      393,  393,  393,    0,    0,    0,    0,    0,    0,    0,
      393,  395,    0,  395,    0,    0,    0,    0,    0,  395,
      395,  395,    0,    0,    0,    0,    0,    0,  395,  395,
      397,  397,    0,    0,    0,    0,    0,    0,    0,    0,
      397,    0,    0,    0,    0,    0,    0,  397,  398,    0,
      398,    0,    0,    0,    0,    0,    0,    0,  398,    0,
        0,    0,    0,    0,    0,  398,  399,  399,  399,    0,
        0,    0,    0,    0,    0,    0,  399,  400,  400,  400,

        0,    0,    0,    0,    0,  400,  400,  400,    0,    0,
        0,    0,    0,    0,    0,  400,  403,  403,  403,    0,
        0,    0,    0,    0,    0,    0,  403,  404,    0,  404,
        0,    0,    0,    0,    0,  404,  404,  404,    0,    0,
        0,    0,    0,    0,    0,  404,  420,    0,  420,    0,
      420,    0,    0,    0,    0,    0,  420,  420,  420,    0,
        0,    0,    0,    0,    0,    0,  420,  420,  421,    0,
      421,    0,  421,    0,    0,    0,    0,    0,  421,  421,
      421,    0,    0,    0,    0,    0,    0,    0,  421,  421,
      422,    0,  422,    0,  422,    0,    0,    0,    0,    0,

        0,    0,  422,    0,    0,    0,    0,    0,    0,    0,
        0,  422,  424,    0,  424,    0,  424,    0,    0,    0,
        0,    0,  424,  424,  424,    0,    0,    0,    0,    0,
        0,    0,  424,  424,  425,    0,  425,    0,  425,    0,
        0,    0,    0,    0,    0,    0,  425,  427,    0,  427,
        0,    0,    0,    0,    0,    0,    0,  427,    0,    0,
        0,    0,    0,    0,  427,  428,  428,  428,    0,    0,
        0,    0,    0,    0,    0,  428,  429,    0,    0,    0,
        0,    0,  429,  429,  429,    0,    0,    0,    0,    0,
        0,    0,  429,  430,  430,  430,  430,  430,  430,  430,

      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  433,  433,  433,
      433,  433,    0,    0,    0,    0,    0,    0,    0,  433,
        0,    0,    0,    0,    0,    0,    0,    0,  433,  436,
      436,  436,  436,  436,    0,    0,    0,    0,    0,    0,
        0,  436,    0,    0,    0,    0,    0,    0,    0,    0,
      436,  437,  437,  437,  437,  437,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  437,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  442,  442,  442,  442,  445,  445,  445,
      445,  445,    0,    0,    0,    0,    0,    0,    0,  445,
        0,    0,    0,    0,    0,    0,    0,    0,  445,  448,
        0,  448,    0,  448,    0,    0,    0,    0,    0,    0,
        0,  448,    0,    0,    0,    0,    0,    0,    0,    0,
      448,  449,  449,  449,  449,  449,    0,    0,    0,    0,
        0,    0,    0,  449,    0,    0,    0,    0,    0,    0,
        0,    0,  449,  453,    0,  453,    0,  453,    0,    0,
        0,    0,    0,  453,  453,  453,    0,    0,    0,    0,
        0,    0,    0,  453,  453,  458,    0,  458,    0,  458,

        0,    0,  458,    0,    0,  458,  458,  458,    0,    0,
        0,    0,    0,    0,    0,  458,  458,  459,    0,  459,
        0,  459,    0,    0,  459,    0,    0,  459,  459,  459,
        0,    0,    0,    0,    0,    0,    0,  459,  459,  461,
        0,  461,    0,  461,    0,    0,  461,    0,    0,    0,
        0,  461,    0,    0,    0,    0,    0,    0,    0,    0,
      461,  462,    0,  462,  462,  462,    0,    0,  462,    0,
        0,  462,  462,    0,    0,    0,    0,    0,    0,    0,
        0,  462,  462,  464,    0,  464,    0,    0,    0,    0,
      464,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  464,  465,    0,  465,    0,    0,
        0,    0,  465,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  465,  466,    0,  466,
        0,    0,    0,    0,  466,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  466,  467,
        0,  467,    0,  467,    0,    0,  467,    0,    0,    0,
        0,  467,    0,    0,    0,    0,    0,    0,    0,    0,
      467,  468,    0,  468,    0,  468,    0,    0,  468,    0,
        0,    0,    0,  468,    0,    0,    0,    0,    0,    0,
        0,    0,  468,  469,    0,  469,    0,  469,    0,    0,

      469,    0,    0,    0,    0,  469,    0,    0,    0,    0,
        0,    0,    0,    0,  469,  470,    0,  470,    0,  470,
        0,    0,  470,    0,    0,    0,    0,  470,    0,    0,
        0,    0,    0,    0,    0,    0,  470,  471,    0,  471,
        0,  471,    0,    0,  471,    0,    0,    0,    0,  471,
        0,    0,    0,    0,    0,    0,    0,    0,  471,  473,
        0,  473,  473,  473,    0,    0,  473,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      473,  475,    0,  475,  475,  475,    0,    0,  475,    0,
        0,  475,  475,    0,    0,    0,    0,    0,    0,    0,

        0,  475,  475,  476,    0,  476,    0,  476,    0,    0,
      476,    0,    0,  476,  476,  476,    0,    0,    0,    0,
        0,    0,    0,  476,  476,  477,    0,  477,    0,  477,
        0,    0,  477,    0,    0,  477,  477,  477,    0,    0,
        0,    0,    0,    0,    0,  477,  477,  478,    0,  478,
        0,  478,    0,    0,  478,    0,    0,  478,  478,  478,
        0,    0,    0,    0,    0,    0,    0,  478,  478,  480,
        0,  480,    0,  480,    0,    0,  480,    0,    0,    0,
        0,  480,    0,    0,    0,    0,    0,    0,    0,    0,
      480,  481,  481,    0,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  482,    0,  482,    0,  482,
        0,    0,  482,    0,    0,  482,  482,  482,    0,    0,
        0,    0,    0,    0,    0,  482,  482,  485,    0,  485,
      485,  485,    0,    0,  485,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  485,  486,
        0,  486,    0,  486,    0,    0,  486,    0,    0,    0,
        0,  486,    0,    0,    0,    0,    0,    0,    0,    0,
      486,  487,    0,  487,    0,  487,    0,    0,  487,    0,
        0,  487,  487,  487,    0,    0,    0,    0,    0,    0,

        0,  487,  487,  491,    0,  491,  491,  491,    0,    0,
      491,    0,    0,  491,  491,    0,    0,    0,    0,    0,
        0,    0,    0,  491,  491,  494,    0,  494,    0,  494,
        0,    0,  494,    0,    0,    0,    0,  494,  495,    0,
      495,    0,  495,    0,    0,  495,    0,    0,    0,    0,
      495,    0,    0,    0,    0,    0,    0,  495,  496,    0,
      496,    0,  496,    0,    0,  496,    0,    0,    0,    0,
      496,  499,    0,  499,    0,  499,    0,    0,  499,    0,
        0,  499,  499,  499,    0,    0,    0,    0,    0,    0,
        0,  499,  500,    0,  500,    0,  500,    0,    0,  500,

        0,    0,    0,    0,  500,  501,    0,  501,    0,  501,
        0,    0,  501,    0,    0,  501,  501,  501,    0,    0,
        0,    0,    0,    0,    0,  501,  503,    0,  503,    0,
      503,    0,    0,  503,    0,    0,  503,  503,  503,    0,
        0,    0,    0,    0,    0,  503,  503,  505,    0,  505,
        0,  505,    0,    0,  505,    0,    0,    0,    0,  505,
      506,    0,  506,  506,  506,    0,    0,  506,    0,    0,
      506,  506,  506,    0,    0,    0,    0,    0,    0,    0,
      506,  507,    0,  507,    0,    0,    0,    0,  507,    0,
        0,    0,    0,  507,  508,    0,  508,    0,    0,    0,

        0,  508,    0,    0,    0,    0,  508,  509,    0,  509,
        0,    0,    0,    0,  509,    0,    0,    0,    0,  509,
      510,    0,    0,  510,    0,    0,    0,  510,    0,    0,
        0,    0,  510,  511,    0,  511,    0,    0,    0,    0,
      511,    0,    0,    0,    0,  511,  513,    0,  513,  513,
      513,    0,    0,  513,    0,    0,  513,  513,  513,    0,
        0,    0,    0,    0,    0,    0,  513,  514,    0,  514,
        0,    0,    0,    0,  514,    0,    0,    0,    0,  514,
      518,    0,  518,    0,    0,    0,    0,  518,    0,    0,
        0,    0,  518,  519,    0,    0,  519,    0,    0,    0,

      519,    0,    0,    0,    0,  519,  520,    0,  520,    0,
      520,    0,    0,  520,    0,    0,  520,  520,  520,    0,
        0,    0,    0,    0,    0,    0,  520,  520,  523,    0,
      523,  523,  523,    0,    0,  523,    0,    0,    0,    0,
      523,  524,    0,  524,  524,  524,    0,    0,    0,    0,
        0,  524,  524,  524,    0,    0,    0,    0,    0,    0,
        0,  524,  524,  525,    0,  525,    0,  525,    0,    0,
        0,    0,    0,    0,    0,  525,    0,    0,    0,    0,
        0,    0,    0,    0,  525,  526,    0,  526,    0,  526,
        0,    0,    0,    0,    0,    0,    0,  526,    0,    0,

        0,    0,    0,    0,    0,    0,  526,  527,    0,  527,
      527,  527,    0,    0,    0,    0,    0,    0,    0,  527,
        0,    0,    0,    0,    0,    0,    0,    0,  527,  528,
        0,  528,    0,  528,    0,    0,    0,    0,    0,    0,
        0,  528,    0,    0,    0,    0,    0,    0,    0,    0,
      528,  529,    0,  529,    0,  529,    0,    0,    0,    0,
        0,    0,    0,  529,    0,    0,    0,    0,    0,    0,
        0,    0,  529,  532,    0,  532,    0,  532,    0,    0,
        0,    0,    0,    0,    0,  532,    0,    0,    0,    0,
        0,    0,    0,    0,  532,  533,    0,    0,    0,  533,

        0,    0,    0,    0,    0,    0,    0,  533,    0,    0,
        0,    0,    0,    0,    0,    0,  533,  534,    0,    0,
        0,  534,    0,    0,    0,    0,    0,    0,    0,  534,
        0,    0,    0,    0,    0,    0,    0,    0,  534,  535,
        0,  535,  535,  535,    0,    0,    0,    0,    0,    0,
        0,  535,    0,    0,    0,    0,    0,    0,    0,    0,
      535,  536,    0,  536,    0,  536,    0,    0,    0,    0,
        0,  536,  536,  536,    0,    0,    0,    0,    0,    0,
        0,  536,  536,  537,    0,  537,    0,  537,    0,    0,
        0,    0,    0,  537,  537,  537,    0,    0,    0,    0,

        0,    0,    0,  537,  537,  539,    0,  539,  539,  539,
        0,    0,    0,    0,    0,  539,  539,  539,    0,    0,
        0,    0,    0,    0,    0,  539,  539,  540,    0,  540,
        0,  540,    0,    0,    0,    0,    0,  540,  540,  540,
        0,    0,    0,    0,    0,    0,    0,  540,  540,  541,
        0,  541,    0,  541,    0,    0,    0,    0,    0,  541,
      541,  541,    0,    0,    0,    0,    0,    0,    0,  541,
      541,  544,    0,  544,    0,  544,    0,    0,    0,    0,
        0,  544,  544,  544,    0,    0,    0,    0,    0,    0,
        0,  544,  544,  545,    0,  545,  545,  545,    0,    0,

        0,    0,    0,  545,  545,  545,    0,    0,    0,    0,
        0,    0,    0,  545,  545,  547,    0,  547,  547,  547,
        0,    0,    0,    0,    0,    0,    0,  547,    0,    0,
        0,    0,    0,    0,    0,    0,  547,  548,    0,  548,
        0,  548,    0,    0,    0,    0,    0,    0,    0,  548,
        0,    0,    0,    0,    0,    0,    0,    0,  548,  549,
        0,  549,    0,  549,    0,    0,    0,    0,    0,    0,
        0,  549,    0,    0,    0,    0,    0,    0,    0,    0,
      549,  553,    0,  553,  553,  553,    0,    0,    0,    0,
        0,  553,  553,  553,    0,    0,    0,    0,    0,    0,

        0,  553,  553,  555,    0,  555,    0,  555,    0,    0,
        0,    0,    0,    0,    0,  555,    0,    0,    0,    0,
        0,    0,    0,    0,  555,  556,    0,  556,  556,  556,
        0,    0,    0,    0,    0,    0,    0,  556,    0,    0,
        0,    0,    0,    0,    0,    0,  556,  557,    0,  557,
        0,  557,    0,    0,    0,    0,    0,    0,    0,  557,
        0,    0,    0,    0,    0,    0,    0,    0,  557,  559,
        0,  559,    0,  559,    0,    0,    0,    0,    0,  559,
      559,  559,    0,    0,    0,    0,    0,    0,    0,  559,
      560,    0,  560,    0,    0,    0,    0,    0,  560,  560,

      560,    0,    0,    0,    0,    0,    0,    0,  560,  561,
      561,  561,    0,    0,    0,    0,    0,  561,  561,  561,
        0,    0,    0,    0,    0,    0,    0,  561,  562,    0,
      562,    0,  562,    0,    0,    0,    0,    0,    0,    0,
      562,  564,  564,  564,    0,    0,    0,    0,    0,    0,
        0,  564,  565,    0,  565,    0,    0,    0,    0,    0,
      565,  565,  565,    0,    0,    0,    0,    0,    0,    0,
      565,  566,  566,  566,    0,    0,    0,    0,    0,  566,
      566,  566,    0,    0,    0,    0,    0,    0,    0,  566,
      569,  569,  569,    0,    0,    0,    0,    0,    0,    0,

      569,  578,    0,  578,    0,  578,    0,    0,    0,    0,
        0,  578,  578,  578,    0,    0,    0,    0,    0,    0,
        0,  578,  578,  580,    0,  580,    0,  580,    0,    0,
        0,    0,    0,  580,  580,  580,    0,    0,    0,    0,
        0,    0,    0,  580,  580,  588,  588,  588,  588,  588,
        0,    0,    0,    0,    0,    0,    0,  588,    0,    0,
        0,    0,    0,    0,    0,    0,  588,  589,  589,  589,
      589,  589,    0,    0,    0,    0,    0,    0,    0,  589,
        0,    0,    0,    0,    0,    0,    0,    0,  589,  592,
        0,  592,    0,  592,    0,    0,  592,    0,    0,  592,

      592,  592,    0,    0,    0,    0,    0,    0,    0,  592,
      592,  593,    0,  593,    0,  593,    0,    0,  593,    0,
        0,  593,  593,  593,    0,    0,    0,    0,    0,    0,
        0,  593,  593,  594,    0,  594,    0,  594,    0,    0,
      594,    0,    0,  594,  594,  594,    0,    0,    0,    0,
        0,    0,    0,  594,  594,  596,    0,  596,    0,  596,
        0,    0,  596,    0,    0,    0,    0,  596,    0,    0,
        0,    0,    0,    0,    0,    0,  596,  598,    0,  598,
        0,  598,    0,    0,  598,    0,    0,    0,    0,  598,
        0,    0,    0,    0,    0,    0,    0,    0,  598,  599,

        0,  599,    0,  599,    0,    0,  599,    0,    0,    0,
        0,  599,    0,    0,    0,    0,    0,    0,    0,    0,
      599,  600,    0,  600,  600,  600,    0,    0,  600,    0,
        0,    0,    0,  600,    0,    0,    0,    0,    0,    0,
        0,    0,  600,  601,    0,  601,    0,  601,    0,    0,
      601,    0,    0,    0,    0,  601,    0,    0,    0,    0,
        0,    0,    0,    0,  601,  602,    0,  602,    0,  602,
        0,    0,  602,    0,    0,    0,    0,  602,    0,    0,
        0,    0,    0,    0,    0,    0,  602,  604,    0,  604,
      604,  604,    0,    0,  604,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  604,  606,
        0,  606,    0,  606,    0,    0,  606,    0,    0,    0,
        0,  606,    0,    0,    0,    0,    0,    0,    0,    0,
      606,  610,    0,  610,    0,  610,    0,    0,  610,    0,
        0,  610,  610,  610,    0,    0,    0,    0,    0,    0,
        0,  610,  610,  611,    0,  611,    0,  611,    0,    0,
      611,    0,    0,  611,  611,  611,    0,    0,    0,    0,
        0,    0,    0,  611,  611,  612,    0,  612,    0,  612,
        0,    0,  612,    0,    0,  612,  612,  612,    0,    0,
        0,    0,    0,    0,    0,  612,  612,  614,    0,  614,

        0,  614,    0,    0,  614,    0,    0,    0,    0,  614,
        0,    0,    0,    0,    0,    0,    0,    0,  614,  618,
        0,  618,    0,  618,    0,    0,  618,    0,    0,  618,
      618,  618,    0,    0,    0,    0,    0,    0,    0,  618,
      618,  619,    0,  619,    0,  619,    0,    0,  619,    0,
        0,  619,  619,  619,    0,    0,    0,    0,    0,    0,
        0,  619,  619,  620,    0,  620,    0,  620,    0,    0,
      620,    0,    0,  620,  620,  620,    0,    0,    0,    0,
        0,    0,    0,  620,  620,  624,    0,  624,    0,  624,
        0,    0,  624,    0,    0,  624,  624,  624,    0,    0,

        0,    0,    0,    0,    0,  624,  624,  631,    0,  631,
        0,  631,    0,    0,  631,    0,    0,    0,    0,  631,
        0,    0,    0,    0,    0,    0,    0,    0,  631,  632,
        0,  632,    0,  632,    0,    0,  632,    0,    0,    0,
        0,  632,    0,    0,    0,    0,    0,    0,    0,    0,
      632,  637,    0,  637,    0,  637,    0,    0,  637,    0,
        0,  637,  637,  637,    0,    0,    0,    0,    0,    0,
        0,  637,  637,  642,    0,  642,    0,  642,    0,    0,
      642,    0,    0,    0,    0,  642,    0,    0,    0,    0,
        0,    0,    0,    0,  642,  643,    0,  643,    0,  643,

        0,    0,  643,    0,    0,  643,  643,  643,    0,    0,
        0,    0,    0,    0,    0,  643,  645,    0,  645,    0,
      645,    0,    0,  645,    0,    0,  645,  645,  645,    0,
        0,    0,    0,    0,    0,  645,  645,  647,    0,  647,
        0,  647,    0,    0,  647,    0,    0,    0,    0,  647,
      648,  648,    0,    0,    0,    0,    0,    0,    0,    0,
      648,    0,    0,    0,    0,    0,    0,  648,  649,    0,
      649,    0,  649,    0,    0,  649,    0,    0,    0,    0,
      649,    0,    0,    0,    0,    0,    0,  649,  651,  651,
        0,    0,    0,    0,    0,    0,    0,    0,  651,    0,

        0,    0,    0,    0,    0,  651,  652,    0,  652,  652,
      652,    0,    0,  652,    0,    0,  652,  652,  652,    0,
        0,    0,    0,    0,    0,    0,  652,  654,    0,    0,
      654,    0,    0,    0,  654,    0,    0,    0,    0,  654,
      656,    0,  656,  656,  656,    0,    0,  656,    0,    0,
        0,    0,  656,  657,    0,  657,    0,  657,    0,    0,
      657,    0,    0,  657,  657,  657,    0,    0,    0,    0,
        0,    0,    0,  657,  658,    0,  658,    0,    0,    0,
        0,  658,    0,    0,    0,    0,  658,  662,    0,  662,
        0,  662,    0,    0,  662,    0,    0,    0,    0,  662,

      664,    0,  664,    0,    0,    0,    0,  664,    0,    0,
        0,    0,  664,  665,    0,  665,    0,    0,    0,    0,
      665,    0,    0,    0,    0,  665,  666,    0,    0,  666,
        0,    0,    0,  666,    0,    0,    0,    0,  666,  667,
        0,    0,  667,    0,    0,    0,  667,    0,    0,    0,
        0,  667,  668,    0,  668,    0,    0,    0,    0,  668,
        0,    0,    0,    0,  668,  669,    0,  669,    0,    0,
        0,    0,  669,    0,    0,    0,    0,  669,  670,    0,
      670,  670,    0,    0,    0,  670,    0,    0,    0,    0,
      670,  671,    0,    0,  671,    0,    0,    0,  671,    0,

        0,    0,    0,  671,  675,    0,  675,    0,    0,    0,
        0,  675,    0,    0,    0,    0,  675,  676,    0,  676,
      676,    0,    0,    0,  676,    0,    0,    0,    0,  676,
      677,    0,  677,    0,  677,    0,    0,  677,    0,    0,
      677,  677,  677,    0,    0,    0,    0,    0,    0,    0,
      677,  677,  678,    0,  678,    0,  678,    0,    0,  678,
        0,    0,  678,  678,  678,    0,    0,    0,    0,    0,
        0,    0,  678,  678,  680,    0,  680,    0,  680,    0,
        0,  680,    0,    0,    0,    0,  680,    0,    0,    0,
        0,    0,    0,    0,    0,  680,  682,    0,  682,    0,

      682,    0,    0,  682,    0,    0,  682,  682,  682,    0,
        0,    0,    0,    0,    0,    0,  682,  682,  683,    0,
      683,    0,  683,    0,    0,  683,    0,    0,    0,    0,
      683,  688,    0,  688,    0,  688,    0,    0,    0,    0,
        0,  688,  688,  688,    0,    0,    0,    0,    0,    0,
        0,  688,  688,  689,    0,  689,    0,  689,    0,    0,
        0,    0,    0,  689,  689,  689,    0,    0,    0,    0,
        0,    0,    0,  689,  689,  690,    0,  690,    0,  690,
        0,    0,    0,    0,    0,  690,  690,  690,    0,    0,
        0,    0,    0,    0,    0,  690,  690,  691,    0,  691,

        0,  691,    0,    0,    0,    0,    0,    0,    0,  691,
        0,    0,    0,    0,    0,    0,    0,    0,  691,  694,
        0,  694,    0,  694,    0,    0,    0,    0,    0,    0,
        0,  694,    0,    0,    0,    0,    0,    0,    0,    0,
      694,  695,    0,  695,  695,  695,    0,    0,    0,    0,
        0,    0,    0,  695,    0,    0,    0,    0,    0,    0,
        0,    0,  695,  696,    0,  696,    0,  696,    0,    0,
        0,    0,    0,    0,    0,  696,    0,    0,    0,    0,
        0,    0,    0,    0,  696,  697,    0,  697,  697,  697,
        0,    0,    0,    0,    0,    0,    0,  697,    0,    0,

        0,    0,    0,    0,    0,    0,  697,  703,    0,  703,
        0,  703,    0,    0,    0,    0,    0,  703,  703,  703,
        0,    0,    0,    0,    0,    0,    0,  703,  703,  704,
        0,  704,    0,  704,    0,    0,    0,    0,    0,  704,
      704,  704,    0,    0,    0,    0,    0,    0,    0,  704,
      704,  706,    0,  706,    0,  706,    0,    0,    0,    0,
        0,    0,    0,  706,    0,    0,    0,    0,    0,    0,
        0,    0,  706,  708,    0,  708,    0,  708,    0,    0,
        0,    0,    0,  708,  708,  708,    0,    0,    0,    0,
        0,    0,    0,  708,  708,  710,    0,  710,    0,  710,

        0,    0,    0,    0,    0,    0,    0,  710,    0,    0,
        0,    0,    0,    0,    0,    0,  710,  715,    0,  715,
        0,  715,    0,    0,    0,    0,    0,    0,    0,  715,
        0,    0,    0,    0,    0,    0,    0,    0,  715,  716,
        0,  716,  716,  716,    0,    0,    0,    0,    0,    0,
        0,  716,    0,    0,    0,    0,    0,    0,    0,    0,
      716,  724,    0,  724,    0,  724,    0,    0,    0,    0,
        0,    0,    0,  724,    0,    0,    0,    0,    0,    0,
        0,    0,  724,  725,    0,  725,  725,  725,    0,    0,
        0,    0,    0,    0,    0,  725,    0,    0,    0,    0,

        0,    0,    0,    0,  725,  726,    0,  726,    0,    0,
        0,    0,    0,  726,  726,  726,    0,    0,    0,    0,
        0,    0,    0,  726,  731,    0,  731,    0,  731,    0,
        0,    0,    0,    0,  731,  731,  731,    0,    0,    0,
        0,    0,    0,    0,  731,  731,  732,    0,  732,    0,
      732,    0,    0,    0,    0,    0,  732,  732,  732,    0,
        0,    0,    0,    0,    0,    0,  732,  732,  733,    0,
      733,  733,  733,    0,    0,    0,    0,    0,  733,  733,
      733,    0,    0,    0,    0,    0,    0,    0,  733,  733,
      736,  736,    0,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  738,    0,  738,    0,  738,    0,
        0,  738,    0,    0,    0,    0,  738,    0,    0,    0,
        0,    0,    0,    0,    0,  738,  739,    0,  739,    0,
      739,    0,    0,  739,    0,    0,    0,    0,  739,    0,
        0,    0,    0,    0,    0,    0,    0,  739,  741,    0,
      741,    0,  741,    0,    0,  741,    0,    0,    0,    0,
      741,    0,    0,    0,    0,    0,    0,    0,    0,  741,
      742,    0,  742,    0,  742,    0,    0,  742,    0,    0,
        0,    0,  742,    0,    0,    0,    0,    0,    0,    0,

        0,  742,  746,    0,  746,    0,  746,    0,    0,  746,
        0,    0,    0,    0,  746,    0,    0,    0,    0,    0,
        0,    0,    0,  746,  747,    0,  747,    0,  747,    0,
        0,  747,    0,    0,    0,    0,  747,    0,    0,    0,
        0,    0,    0,    0,    0,  747,  748,    0,  748,    0,
      748,    0,    0,  748,    0,    0,    0,    0,  748,    0,
        0,    0,    0,    0,    0,    0,    0,  748,  750,    0,
      750,  750,  750,    0,    0,  750,    0,    0,    0,    0,
      750,    0,    0,    0,    0,    0,    0,    0,    0,  750,
      755,  755,    0,  755,  755,  755,  755,  755,  755,  755,

      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  756,    0,  756,    0,  756,    0,
        0,  756,    0,    0,  756,  756,  756,    0,    0,    0,
        0,    0,    0,    0,  756,  756,  757,    0,  757,    0,
      757,    0,    0,  757,    0,    0,  757,  757,  757,    0,
        0,    0,    0,    0,    0,    0,  757,  757,  760,    0,
      760,    0,  760,    0,    0,  760,    0,    0,  760,  760,
      760,    0,    0,    0,    0,    0,    0,    0,  760,  760,
      761,  761,    0,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,

      761,  761,  761,  761,  764,    0,  764,  764,  764,    0,
        0,  764,    0,    0,    0,    0,  764,    0,    0,    0,
        0,    0,    0,    0,    0,  764,  765,    0,  765,    0,
      765,    0,    0,  765,    0,    0,    0,    0,  765,    0,
        0,    0,    0,    0,    0,    0,    0,  765,  766,    0,
      766,    0,  766,    0,    0,  766,    0,    0,    0,    0,
      766,    0,    0,    0,    0,    0,    0,    0,    0,  766,
      771,  771,    0,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  776,    0,  776,    0,  776,    0,

        0,  776,    0,    0,    0,    0,  776,    0,    0,    0,
        0,    0,    0,    0,    0,  776,  778,    0,    0,  778,
        0,    0,    0,  778,    0,    0,    0,    0,  778,  779,
        0,  779,    0,  779,    0,    0,  779,    0,    0,  779,
      779,  779,    0,    0,    0,    0,    0,    0,    0,  779,
      780,    0,  780,    0,  780,    0,    0,  780,    0,    0,
      780,  780,  780,    0,    0,    0,    0,    0,    0,    0,
      780,  781,    0,  781,  781,  781,    0,    0,  781,    0,
        0,  781,  781,  781,    0,    0,    0,    0,    0,    0,
        0,  781,  783,    0,  783,    0,  783,    0,    0,  783,

        0,    0,    0,    0,  783,  784,    0,  784,  784,  784,
        0,    0,  784,    0,    0,    0,    0,  784,  785,    0,
      785,    0,  785,    0,    0,  785,    0,    0,  785,  785,
      785,    0,    0,    0,    0,    0,    0,    0,  785,  786,
        0,  786,  786,  786,    0,    0,  786,    0,    0,  786,
      786,  786,    0,    0,    0,    0,    0,    0,    0,  786,
      788,    0,  788,    0,  788,    0,    0,  788,    0,    0,
        0,    0,  788,  789,    0,  789,  789,  789,    0,    0,
      789,    0,    0,    0,    0,  789,  791,    0,  791,    0,
        0,    0,    0,  791,    0,    0,    0,    0,  791,  792,

        0,  792,  792,    0,    0,    0,  792,    0,    0,    0,
        0,  792,  793,    0,  793,    0,    0,    0,    0,  793,
        0,    0,    0,    0,  793,  794,    0,  794,  794,    0,
        0,    0,  794,    0,    0,    0,    0,  794,  797,    0,
      797,  797,    0,    0,    0,  797,    0,    0,    0,    0,
      797,  798,    0,  798,    0,  798,    0,    0,  798,    0,
        0,  798,  798,  798,    0,    0,    0,    0,    0,    0,
        0,  798,  798,  806,  806,    0,    0,    0,    0,    0,
        0,    0,    0,  806,    0,    0,    0,    0,    0,    0,
        0,    0,  806,  808,    0,  808,    0,  808,    0,    0,

        0,    0,    0,    0,    0,  808,    0,    0,    0,    0,
        0,    0,    0,    0,  808,  809,    0,  809,    0,  809,
        0,    0,    0,    0,    0,    0,    0,  809,    0,    0,
        0,    0,    0,    0,    0,    0,  809,  813,    0,  813,
        0,  813,    0,    0,    0,    0,    0,  813,  813,  813,
        0,    0,    0,    0,    0,    0,    0,  813,  813,  814,
        0,  814,  814,  814,    0,    0,    0,    0,    0,  814,
      814,  814,    0,    0,    0,    0,    0,    0,    0,  814,
      814,  818,    0,  818,    0,  818,    0,    0,    0,    0,
        0,    0,    0,  818,    0,    0,    0,    0,    0,    0,

        0,    0,  818,  819,    0,  819,  819,  819,    0,    0,
        0,    0,    0,    0,    0,  819,    0,    0,    0,    0,
        0,    0,    0,    0,  819,  821,    0,  821,    0,  821,
        0,    0,    0,    0,    0,    0,    0,  821,    0,    0,
        0,    0,    0,    0,    0,    0,  821,  822,    0,  822,
        0,  822,    0,    0,    0,    0,    0,  822,  822,  822,
        0,    0,    0,    0,    0,    0,    0,  822,  822,  834,
        0,  834,  834,  834,    0,    0,  834,    0,    0,    0,
        0,  834,    0,    0,    0,    0,    0,    0,    0,    0,
      834,  899,  899,  899,  899,  901,  901,  901,  901,  903,

        0,    0,  903,  905,  905,  905,  905,  906,  906,  906,
      906,  907,  907,  907,  907,  908,  908,    0,  908,  909,
      909,  910,    0,    0,  910,  913,    0,    0,  913,  915,
      915,  915,  915,  916,  916,  916,  916,  917,  917,  917,
      917,  918,  918,  918,  918,  919,  919,  919,  919,  920,
      920,    0,  920,  921,  921,    0,  921,  922,  922,    0,
      922,  923,  923,  924,  924,  925,  925,    0,  925,  926,
        0,    0,  926,  927,    0,    0,  927,  928,    0,    0,
      928,  929,    0,    0,  929,  930,    0,    0,  930,  931,
      931,  932,    0,    0,  932,  933,  933,  933,  933,  934,

      934,  934,  934,  935,  935,  935,  935,  936,  936,  936,
      936,  937,  937,  937,  937,  938,  938,  938,  938,  939,
      939,  939,  939,  940,  940,    0,  940,  941,  941,    0,
      941,  942,  942,    0,  942,  943,  943,    0,  943,  944,
      944,    0,  944,  945,  945,    0,  945,  946,  946,  947,
      947,  948,  948,    0,  948,  949,  949,  950,  950,    0,
      950,  951,  951,  952,  952,  953,    0,    0,  953,  954,
        0,    0,  954,  955,    0,    0,  955,  956,    0,    0,
      956,  957,    0,    0,  957,  959,  959,  960,  960,  960,
      960,  961,  961,  961,  961,  962,  962,  962,  962,  963,

      963,  963,  963,  964,  964,  964,  964,  965,  965,  965,
      965,  966,  966,    0,  966,  967,  967,    0,  967,  968,
      968,    0,  968,  969,  969,    0,  969,  970,  970,    0,
      970,  971,  971,    0,  971,  972,  972,    0,  972,  973,
      973,    0,  973,  974,  974,    0,  974,  975,  975,    0,
      975,  976,  976,    0,  976,  977,  977,    0,  977,  978,
      978,  979,  979,  980,  980,    0,  980,  981,  981,  982,
      982,    0,  982,  983,  983,  984,  984,  985,  985,    0,
      985,  986,  986,    0,  986,  987,  987,  988,  988,    0,
      988,  989,  989,    0,  989,  990,  990,    0,  990,  991,

      991,    0,  991,  992,    0,    0,  992,  993,    0,    0,
      993,  994,    0,    0,  994,  995,    0,    0,  995,  996,
        0,    0,  996,  997,    0,    0,  997,  998,    0,    0,
      998,  999,    0,    0,  999, 1000,    0,    0, 1000, 1001,
        0,    0, 1001, 1002,    0,    0, 1002, 1003,    0,    0,
     1003, 1004, 1004,    0, 1004, 1005,    0,    0, 1005, 1007,
     1007, 1007, 1007, 1008, 1008, 1008, 1008, 1009, 1009, 1009,
     1009, 1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011, 1012,
     1012, 1012, 1012, 1013, 1013, 1013, 1013, 1014, 1014, 1014,
     1014, 1015, 1015, 1015, 1015, 1016, 1016,    0, 1016, 1017,

     1017,    0, 1017, 1018, 1018,    0, 1018, 1019, 1019,    0,
     1019, 1020, 1020,    0, 1020, 1021, 1021,    0, 1021, 1022,
     1022,    0, 1022, 1023, 1023,    0, 1023, 1024, 1024,    0,
     1024, 1025, 1025,    0, 1025, 1026, 1026,    0, 1026, 1027,
     1027,    0, 1027, 1028, 1028,    0, 1028, 1029, 1029,    0,
     1029, 1030, 1030,    0, 1030, 1031, 1031,    0, 1031, 1032,
     1032,    0, 1032, 1033, 1033,    0, 1033, 1034, 1034,    0,
     1034, 1035, 1035,    0, 1035, 1036, 1036,    0, 1036, 1037,
     1037,    0, 1037, 1038, 1038, 1039, 1039,    0, 1039, 1040,
     1040,    0, 1040, 1041, 1041,    0, 1041, 1042, 1042,    0,

     1042, 1043, 1043, 1044, 1044,    0, 1044, 1045, 1045, 1046,
     1046,    0, 1046, 1047, 1047,    0, 1047, 1048, 1048,    0,
     1048, 1049, 1049,    0, 1049, 1050,    0,    0, 1050, 1051,
        0,    0, 1051, 1052,    0,    0, 1052, 1053,    0,    0,
     1053, 1054,    0,    0, 1054, 1055,    0,    0, 1055, 1056,
        0,    0, 1056, 1057,    0,    0, 1057, 1058,    0,    0,
     1058, 1059, 1059,    0, 1059, 1060, 1060,    0, 1060, 1062,
     1062, 1062, 1062, 1063, 1063, 1063, 1063, 1064, 1064, 1064,
     1064, 1065, 1065,    0, 1065, 1066, 1066,    0, 1066, 1067,
     1067,    0, 1067, 1068, 1068,    0, 1068, 1069, 1069,    0,

     1069, 1070, 1070,    0, 1070, 1071, 1071,    0, 1071, 1072,
     1072,    0, 1072, 1073, 1073,    0, 1073, 1074, 1074,    0,
     1074, 1075, 1075,    0, 1075, 1076, 1076,    0, 1076, 1077,
     1077,    0, 1077, 1078, 1078,    0, 1078, 1079, 1079,    0,
     1079, 1080, 1080,    0, 1080, 1081, 1081,    0, 1081, 1082,
     1082,    0, 1082, 1083, 1083,    0, 1083, 1084, 1084,    0,
     1084, 1085, 1085,    0, 1085, 1086, 1086,    0, 1086, 1087,
     1087,    0, 1087, 1088, 1088,    0, 1088, 1089, 1089,    0,
     1089, 1090, 1090,    0, 1090, 1091, 1091,    0, 1091, 1092,
     1092,    0, 1092, 1093, 1093,    0, 1093, 1094, 1094,    0,

     1094, 1095, 1095,    0, 1095, 1096, 1096,    0, 1096, 1097,
     1097,    0, 1097, 1098, 1098, 1099, 1099,    0, 1099, 1100,
     1100,    0, 1100, 1101, 1101,    0, 1101, 1102, 1102,    0,
     1102, 1103, 1103,    0, 1103, 1104, 1104,    0, 1104, 1105,
     1105,    0, 1105, 1106, 1106,    0, 1106, 1107, 1107,    0,
     1107, 1108, 1108,    0, 1108, 1109,    0,    0, 1109, 1110,
     1110,    0, 1110, 1111,    0,    0, 1111, 1112,    0,    0,
     1112, 1113,    0,    0, 1113, 1114,    0,    0, 1114, 1115,
        0,    0, 1115, 1116,    0,    0, 1116, 1117,    0,    0,
     1117, 1118, 1118, 1118, 1118, 1119, 1119,    0, 1119, 1120,

     1120,    0, 1120, 1121, 1121,    0, 1121, 1122, 1122,    0,
     1122, 1123, 1123,    0, 1123, 1124, 1124,    0, 1124, 1125,
     1125,    0, 1125, 1126, 1126,    0, 1126, 1127, 1127,    0,
     1127, 1128, 1128,    0, 1128, 1129, 1129,    0, 1129, 1130,
     1130,    0, 1130, 1131, 1131,    0, 1131, 1132, 1132,    0,
     1132, 1133, 1133,    0, 1133, 1134, 1134,    0, 1134, 1135,
     1135,    0, 1135, 1136, 1136,    0, 1136, 1137, 1137,    0,
     1137, 1138, 1138,    0, 1138, 1139, 1139,    0, 1139, 1140,
     1140,    0, 1140, 1141, 1141,    0, 1141, 1142, 1142,    0,
     1142, 1143, 1143,    0, 1143, 1144, 1144,    0, 1144, 1145,

     1145,    0, 1145, 1146, 1146,    0, 1146, 1147, 1147,    0,
     1147, 1148, 1148,    0, 1148, 1149, 1149,    0, 1149, 1150,
     1150,    0, 1150, 1151, 1151,    0, 1151, 1152, 1152,    0,
     1152, 1153,    0,    0, 1153, 1154,    0,    0, 1154, 1155,
        0,    0, 1155, 1156, 1156,    0, 1156, 1157, 1157,    0,
     1157, 1158, 1158,    0, 1158, 1159, 1159,    0, 1159, 1160,
     1160,    0, 1160, 1161, 1161,    0, 1161, 1162, 1162,    0,
     1162, 1163, 1163,    0, 1163, 1164, 1164,    0, 1164, 1165,
     1165,    0, 1165, 1166, 1166,    0, 1166, 1167, 1167,    0,
     1167, 1168, 1168,    0, 1168, 1169, 1169,    0, 1169, 1170,

     1170,    0, 1170, 1171, 1171,    0, 1171, 1172, 1172,    0,
     1172, 1173, 1173,    0, 1173, 1174, 1174,    0, 1174, 1175,
     1175,    0, 1175, 1176, 1176,    0, 1176, 1177, 1177,    0,
     1177, 1178, 1178,    0, 1178, 1179, 1179,    0, 1179,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[21] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 * CS-252 
 * shell.l: lexical analyzer for shell
 */

#line 8 "shell.l"

#include <cstring>
#include "y.tab.hh"
#include "shell.hh"
#include <unistd.h>

static void yyunput (int c,char *buf_ptr  );
void myunputc(int c) { unput(c); }

extern "C" char * read_line();

int mygetc(FILE * f) {
	static char *p;
	char ch;

	if (!isatty(0)) { // stdin is not a tty. Call real getc
    		return getc(f);
  	}

  	// stdin is a tty. Call our read_line.
  	if (p==NULL || *p == 0) {
    		char * s = read_line();
    		p = s;
  	}

  	ch = *p;
  	p++;

  	return ch;
}

#undef getc
#define getc(f) mygetc(f)

#line 2949 "lex.yy.cc"
#line 2950 "lex.yy.cc"

#define INITIAL 0
#define s 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 46 "shell.l"


#line 3171 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 899 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9440 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 48 "shell.l"
{ return NEWLINE; } 
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 49 "shell.l"
{ } // discard spaces and tabs 
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 50 "shell.l"
{ return GREAT; } 
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 51 "shell.l"
{ return LESS; } 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 52 "shell.l"
{ return GREATGREAT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 53 "shell.l"
{ return PIPE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 54 "shell.l"
{ return AMPERSAND; } 
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 55 "shell.l"
{ return GREATAMPERSAND; } 
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 56 "shell.l"
{ return GREATGREATAMPERSAND; } 
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 57 "shell.l"
{ return TWOGREAT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 58 "shell.l"
{
	BEGIN(s);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 61 "shell.l"
{}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 62 "shell.l"
{
	FILE * f = fopen(yytext, "a+");
	if (f) {
		fputc('\n', f);
		yypush_buffer_state(yy_create_buffer(f, YY_BUF_SIZE));
	        Shell::_isSrc = true;
		BEGIN(INITIAL);
		yyparse();
		yypop_buffer_state();
		Shell::_isSrc = false;
		fclose(f);
	}
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "shell.l"
{ // ~ expansion
	std::string * in = new std::string(yytext);
	std::string result;

	if (in->size() == 1) result = "/homes/chris288/";
	else if (in->at(1) != '/') result = "/homes/" + in->substr(1, -1);
	else result = "/homes/chris288" + in->substr(1, -1);

	delete in;
	yylval.cpp_string = new std::string(result);
	return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 87 "shell.l"
{ // subshell
	std::string * temp = new std::string(yytext);
	const char * cmd = temp->substr(2, temp->length() - 3).c_str();

	int std_in = dup(0);
	int std_out = dup(1);
	int pipe_to_chld[2];
	int pipe_to_prnt[2];

	pipe(pipe_to_chld);
	pipe(pipe_to_prnt);

	write(pipe_to_chld[1], cmd, strlen(cmd));
	write(pipe_to_chld[1], "\n", 1);
	close(pipe_to_chld[1]);

	temp->clear();
	delete temp;

	dup2(pipe_to_chld[0], 0);
	dup2(pipe_to_prnt[1], 1);
	close(pipe_to_chld[0]);
	close(pipe_to_prnt[1]);

	int ret = fork();
	
	if (ret == 0) {
		execvp("/proc/self/exe", NULL);
		perror("execvp");
		_exit(1);
	} else if (ret < 0) {
		perror("fork");
		exit(1);
	} else {
		dup2(std_in, 0);
		dup2(std_out, 1);
		close(std_in);
		close(std_out);

		int i = 0;
		char c;
		char buffer[4096];
		while (read(pipe_to_prnt[0], &c, 1)) {
			if (c == '\n') buffer[i++] = ' ';
			else buffer[i++] = c;
		}
		buffer[i] = '\0';
		
		for (int j = i - 1; j >= 0; j--) {
			unput(buffer[j]);
		}
	}
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 140 "shell.l"
{ // for env variables
	std::string * in = new std::string(yytext);
	std::string result = "";
	
	int start_index = 0, index = 0;
	while (index != -1) {
		index = in->find("$", start_index);
		std::string sub = in->substr(start_index, index - start_index);
		result += sub;

		int index2 = in->find("}", index);
		std::string sub2 = in->substr(index + 2, index2 - index - 2);  
	
		if (sub2.compare("$") == 0) {
			int pid = getpid();
			result += std::to_string(pid);	
		} else if (sub2.compare("?") == 0) {
			result += std::to_string(Shell::_lastReturnCode);
		} else if (sub2.compare("!") == 0) {
			if (Shell::_backgroundPids.size()) result += std::to_string(Shell::_backgroundPids.back());
		} else if (sub2.compare("_") == 0) {
			result += Shell::_lastCmd;	
		} else if (sub2.compare("SHELL") == 0) {
			result += "/u/riker/u91/chris288/cs252/lab3-src/shell";
		} else {
			if (getenv(sub2.c_str())) result += getenv(sub2.c_str());
			else result += sub2;
		}

		start_index = index2 + 1;
		index = in->find("$", start_index); 
	}

	if (start_index < in->length()) {
		std::string sub = in->substr(start_index, - 1);
		result += sub;
	}

	delete in;

	yylval.cpp_string = new std::string(result);
	return WORD;
}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 183 "shell.l"
{ // allow for quotes as input but remove them before returning word
	yylval.cpp_string = new std::string(yytext);
	*yylval.cpp_string = yylval.cpp_string->substr(1, yylval.cpp_string->length()-2);
	return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 188 "shell.l"
{ // allow for escape characters
	char * str = strdup(yytext);
	char * str_ret = (char *)malloc(strlen(yytext));
	
	int i;
	for (i = 0; *str; i++, str++) {
		if (*str == '\\') str++;
		str_ret[i] = *str;
	}
	str_ret[i] = '\0';

	yylval.cpp_string = new std::string(str_ret);
	free(str_ret);
	
	return WORD;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 204 "shell.l"
{ // assume that file names have only alpha chars
	yylval.cpp_string = new std::string(yytext);
	return WORD;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 211 "shell.l"
ECHO;
	YY_BREAK
#line 3481 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(s):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 899 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 899 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 898);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 211 "shell.l"
